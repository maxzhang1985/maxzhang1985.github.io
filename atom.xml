<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go &amp; Java &amp; .NET &amp; Microservices</title>
  
  <subtitle>专注于企业开发、设计模式、微服务、框架设计。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maxzhang1985.github.io/"/>
  <updated>2020-05-28T08:56:14.318Z</updated>
  <id>http://maxzhang1985.github.io/</id>
  
  <author>
    <name>YOYOFx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Core设计的Golang实现</title>
    <link href="http://maxzhang1985.github.io/2020/05/28/Core%E8%AE%BE%E8%AE%A1%E7%9A%84Golang%E5%AE%9E%E7%8E%B0/"/>
    <id>http://maxzhang1985.github.io/2020/05/28/Core设计的Golang实现/</id>
    <published>2020-05-28T16:51:56.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YoyoGo"><a href="#YoyoGo" class="headerlink" title="YoyoGo"></a>YoyoGo</h1><p>YoyoGo 是一个用 Go 编写的简单，轻便，快速的 Web 框架。</p><p><img src="https://img.shields.io/github/v/tag/maxzhang1985/yoyogo.svg?color=24B898&amp;label=release&amp;logo=github&amp;sort=semver" alt="Release"><br><a href="https://travis-ci.org/maxzhang1985/yoyogo" target="_blank" rel="noopener"><img src="https://img.shields.io/travis/maxzhang1985/yoyogo.svg" alt="Build Status"></a><br><a href="https://goreportcard.com/report/github.com/maxzhang1985/yoyogo" target="_blank" rel="noopener"><img src="https://goreportcard.com/badge/github.com/maxzhang1985/yoyogo" alt="Report"></a><br><a href="https://godoc.org/github.com/maxzhang1985/yoyogo" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/godoc-reference-blue.svg?color=24B898&amp;logo=go&amp;logoColor=ffffff" alt="Documentation"></a><br><img src="https://img.shields.io/github/go-mod/go-version/maxzhang1985/yoyogo" alt="GoVersion"><br><img src="https://img.shields.io/docker/pulls/maxzhang1985/yoyogo" alt="DockerPull"><br><img src="https://img.shields.io/github/contributors/maxzhang1985/yoyogo.svg" alt="Contributors"><br><a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/License-MIT-green.svg" alt="License"></a></p><h1 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h1><ul><li>漂亮又快速的路由器</li><li>中间件支持 (handler func &amp; custom middleware)</li><li>对 REST API 友好</li><li>没有正则表达式</li><li>受到许多出色的 Go Web 框架的启发</li></ul><h1 id="框架安装"><a href="#框架安装" class="headerlink" title="框架安装"></a>框架安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/maxzhang1985/yoyogo</span><br></pre></td></tr></table></figure><h1 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    YoyoGo.CreateDefaultBuilder(<span class="function"><span class="keyword">func</span><span class="params">(router Router.IRouterBuilder)</span></span> &#123;</span><br><span class="line">        router.GET(<span class="string">"/info"</span>,<span class="function"><span class="keyword">func</span> <span class="params">(ctx *Context.HttpContext)</span></span> &#123;    <span class="comment">// 支持Group方式</span></span><br><span class="line">            ctx.JSON(<span class="number">200</span>, Context.M&#123;<span class="string">"info"</span>: <span class="string">"ok"</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).Build().Run()       <span class="comment">//默认端口号 :8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./yoyorun.jpg" alt><br><a id="more"></a></p><h1 id="实现进度"><a href="#实现进度" class="headerlink" title="实现进度"></a>实现进度</h1><h2 id="标准功能"><a href="#标准功能" class="headerlink" title="标准功能"></a>标准功能</h2><ul><li>[X] 打印Logo和日志（YoyoGo）</li><li>[X] 统一程序输入参数和环境变量 (YoyoGo)</li><li>[X] 简单路由器绑定句柄功能</li><li>[X] HttpContext 上下文封装(请求，响应)</li><li>[X] 静态文件端点（静态文件服务器）</li><li>[X] JSON 序列化结构（Context.M）</li><li>[X] 获取请求文件并保存</li><li>[X] 获取请求数据（form-data，x-www-form-urlencoded，Json ，XML，Protobuf 等）</li><li>[X] Http 请求的绑定模型（Url, From，JSON，XML，Protobuf）<h3 id="响应渲染功能"><a href="#响应渲染功能" class="headerlink" title="响应渲染功能"></a>响应渲染功能</h3></li><li>[X] Render Interface</li><li>[X] JSON Render</li><li>[X] JSONP Render</li><li>[X] Indented Json Render</li><li>[X] Secure Json Render</li><li>[X] Ascii Json Render</li><li>[X] Pure Json Render</li><li>[X] Binary Data Render</li><li>[X] TEXT</li><li>[X] Protobuf</li><li>[X] MessagePack</li><li>[X] XML</li><li>[X] YAML</li><li>[X] File</li><li>[X] Image</li><li>[X] Template</li><li>[X] Auto formater Render</li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li>[X] Logger</li><li>[X] StaticFile</li><li>[X] Router Middleware</li><li>[ ] Session</li><li>[ ] CORS</li><li>[ ] GZip    </li><li>[X] Binding</li><li>[ ] Binding Valateion</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>[x] GET，POST，HEAD，PUT，DELETE 方法支持</li><li>[x] 路由解析树与表达式支持</li><li>[x] RouteData路由数据 (/api/:version/) 与 Binding的集成 </li><li>[x] 路由组功能</li><li>[ ] MVC默认模板功能</li><li>[ ] 路由过滤器 Filter</li></ul><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul><li>[x] 路由请求触发Controller&amp;Action</li><li>[X] Action方法参数绑定</li><li>[ ] 内部对象的DI化</li><li>[ ] 关键对象的参数传递</li></ul><h2 id="Dependency-injection"><a href="#Dependency-injection" class="headerlink" title="Dependency injection"></a>Dependency injection</h2><ul><li>[X] 抽象集成第三方DI框架</li><li>[X] MVC模式集成</li><li>[ ] 框架级的DI支持功能</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>[ ] 配置</li><li>[ ] WebSocket</li><li>[ ] JWT </li><li>[ ] swagger</li><li>[ ] GRpc</li><li>[ ] OAuth2     </li><li>[ ] Prometheus </li><li>[ ] 安全</li></ul><h1 id="进阶范例"><a href="#进阶范例" class="headerlink" title="进阶范例"></a>进阶范例</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">webHost := CreateCustomWebHostBuilder().Build()</span><br><span class="line">webHost.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义HostBuilder并支持 MVC 和 自动参数绑定功能，简单情况也可以直接使用CreateDefaultBuilder 。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateCustomBuilder</span><span class="params">()</span> *<span class="title">YoyoGo</span>.<span class="title">HostBuilder</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> YoyoGo.NewWebHostBuilder().</span><br><span class="line">UseFastHttp().         <span class="comment">//Server可以指定多种，这里使用FastHttp作为Server，后期也会实现gRPC和WebSocket</span></span><br><span class="line">                       <span class="comment">//使用默认Server并指定协议和端口 UseServer(YoyoGo.DefaultHttps(":8080", "./Certificate/server.pem", "./Certificate/server.key")).</span></span><br><span class="line">Configure(<span class="function"><span class="keyword">func</span><span class="params">(app *YoyoGo.ApplicationBuilder)</span></span> &#123;</span><br><span class="line">app.SetEnvironment(Context.Dev)</span><br><span class="line">app.UseStatic(<span class="string">"Static"</span>)</span><br><span class="line">app.UseEndpoints(registerEndpoints)             <span class="comment">// endpoint 路由绑定函数</span></span><br><span class="line">app.UseMvc()                                    <span class="comment">// 开启MVC功能</span></span><br><span class="line">app.ConfigureMvcParts(<span class="function"><span class="keyword">func</span><span class="params">(builder *Controller.ControllerBuilder)</span></span> &#123;</span><br><span class="line">builder.AddController(contollers.NewUserController)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).</span><br><span class="line">ConfigureServices(<span class="function"><span class="keyword">func</span><span class="params">(serviceCollection *DependencyInjection.ServiceCollection)</span></span> &#123;      <span class="comment">// 依赖注入方法</span></span><br><span class="line">serviceCollection.AddTransientByImplements(models.NewUserAction, <span class="built_in">new</span>(models.IUserAction))</span><br><span class="line">&#125;).</span><br><span class="line">OnApplicationLifeEvent(getApplicationLifeEvent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//region endpoint 路由绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerEndpoints</span><span class="params">(router Router.IRouterBuilder)</span></span> &#123;</span><br><span class="line">router.GET(<span class="string">"/error"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *Context.HttpContext)</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"http get error"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//POST 请求: /info/:id ?q1=abc&amp;username=123</span></span><br><span class="line">router.POST(<span class="string">"/info/:id"</span>, <span class="function"><span class="keyword">func</span> <span class="params">(ctx *Context.HttpContext)</span></span> &#123;</span><br><span class="line">        qs_q1 := ctx.Query(<span class="string">"q1"</span>)</span><br><span class="line">        pd_name := ctx.Param(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        userInfo := &amp;UserInfo&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        _ = ctx.Bind(userInfo)    <span class="comment">// 手动绑定请求对象</span></span><br><span class="line"></span><br><span class="line">        strResult := fmt.Sprintf(<span class="string">"Name:%s , Q1:%s , bind: %s"</span>, pd_name, qs_q1, userInfo)</span><br><span class="line"></span><br><span class="line">        ctx.JSON(<span class="number">200</span>, Std.M&#123;<span class="string">"info"</span>: <span class="string">"hello world"</span>, <span class="string">"result"</span>: strResult&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由组功能实现绑定 GET 请求:  /v1/api/info</span></span><br><span class="line">router.Group(<span class="string">"/v1/api"</span>, <span class="function"><span class="keyword">func</span><span class="params">(router *Router.RouterGroup)</span></span> &#123;</span><br><span class="line">router.GET(<span class="string">"/info"</span>, <span class="function"><span class="keyword">func</span> <span class="params">(ctx *Context.HttpContext)</span></span> &#123;</span><br><span class="line">        ctx.JSON(<span class="number">200</span>, Std.M&#123;<span class="string">"info"</span>: <span class="string">"ok"</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// GET 请求: HttpContext.RequiredServices获取IOC对象</span></span><br><span class="line">router.GET(<span class="string">"/ioc"</span>, <span class="function"><span class="keyword">func</span> <span class="params">(ctx *Context.HttpContext)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> userAction models.IUserAction</span><br><span class="line">        _ = ctx.RequiredServices.GetService(&amp;userAction)</span><br><span class="line">        ctx.JSON(<span class="number">200</span>, Std.M&#123;<span class="string">"info"</span>: <span class="string">"ok "</span> + userAction.Login(<span class="string">"zhang"</span>)&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//region 请求对象</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`param:"username"`</span></span><br><span class="line">Number   <span class="keyword">string</span> <span class="string">`param:"q1"`</span></span><br><span class="line">Id       <span class="keyword">string</span> <span class="string">`param:"id"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------- MVC 定义 ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Controller</span></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">*Controller.ApiController</span><br><span class="line">userAction models.IUserAction    <span class="comment">// IOC 对象参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器依赖注入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserController</span><span class="params">(userAction models.IUserAction)</span> *<span class="title">UserController</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UserController&#123;userAction: userAction&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求对象的参数化绑定</span></span><br><span class="line"><span class="keyword">type</span> RegiserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Controller.RequestParam</span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`param:"username"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`param:"password"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register函数自动绑定参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span> <span class="title">Register</span><span class="params">(ctx *Context.HttpContext, request *RegiserRequest)</span> <span class="title">ActionResult</span>.<span class="title">IActionResult</span></span> &#123;</span><br><span class="line">result := Controller.ApiResult&#123;Success: <span class="literal">true</span>, Message: <span class="string">"ok"</span>, Data: request&#125;</span><br><span class="line"><span class="keyword">return</span> ActionResult.Json&#123;Data: result&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use userAction interface by ioc  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *UserController)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">Controller</span>.<span class="title">ApiResult</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.OK(this.userAction.Login(<span class="string">"zhang"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Web程序的开始与停止事件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fireApplicationLifeEvent</span><span class="params">(life *YoyoGo.ApplicationLife)</span></span> &#123;</span><br><span class="line">printDataEvent := <span class="function"><span class="keyword">func</span><span class="params">(event YoyoGo.ApplicationEvent)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[yoyogo] Topic: %s; Event: %v\n"</span>, event.Topic, event.Data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ev := &lt;-life.ApplicationStarted:</span><br><span class="line"><span class="keyword">go</span> printDataEvent(ev)</span><br><span class="line"><span class="keyword">case</span> ev := &lt;-life.ApplicationStopped:</span><br><span class="line"><span class="keyword">go</span> printDataEvent(ev)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;YoyoGo&quot;&gt;&lt;a href=&quot;#YoyoGo&quot; class=&quot;headerlink&quot; title=&quot;YoyoGo&quot;&gt;&lt;/a&gt;YoyoGo&lt;/h1&gt;&lt;p&gt;YoyoGo 是一个用 Go 编写的简单，轻便，快速的 Web 框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/maxzhang1985/yoyogo.svg?color=24B898&amp;amp;label=release&amp;amp;logo=github&amp;amp;sort=semver&quot; alt=&quot;Release&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://travis-ci.org/maxzhang1985/yoyogo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/maxzhang1985/yoyogo.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://goreportcard.com/report/github.com/maxzhang1985/yoyogo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/maxzhang1985/yoyogo&quot; alt=&quot;Report&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://godoc.org/github.com/maxzhang1985/yoyogo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/godoc-reference-blue.svg?color=24B898&amp;amp;logo=go&amp;amp;logoColor=ffffff&quot; alt=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://img.shields.io/github/go-mod/go-version/maxzhang1985/yoyogo&quot; alt=&quot;GoVersion&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/maxzhang1985/yoyogo&quot; alt=&quot;DockerPull&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/maxzhang1985/yoyogo.svg&quot; alt=&quot;Contributors&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-green.svg&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;特色&quot;&gt;&lt;a href=&quot;#特色&quot; class=&quot;headerlink&quot; title=&quot;特色&quot;&gt;&lt;/a&gt;特色&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;漂亮又快速的路由器&lt;/li&gt;
&lt;li&gt;中间件支持 (handler func &amp;amp; custom middleware)&lt;/li&gt;
&lt;li&gt;对 REST API 友好&lt;/li&gt;
&lt;li&gt;没有正则表达式&lt;/li&gt;
&lt;li&gt;受到许多出色的 Go Web 框架的启发&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;框架安装&quot;&gt;&lt;a href=&quot;#框架安装&quot; class=&quot;headerlink&quot; title=&quot;框架安装&quot;&gt;&lt;/a&gt;框架安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get github.com/maxzhang1985/yoyogo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;简单的例子&quot;&gt;&lt;a href=&quot;#简单的例子&quot; class=&quot;headerlink&quot; title=&quot;简单的例子&quot;&gt;&lt;/a&gt;简单的例子&lt;/h1&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    YoyoGo.CreateDefaultBuilder(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(router Router.IRouterBuilder)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        router.GET(&lt;span class=&quot;string&quot;&gt;&quot;/info&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(ctx *Context.HttpContext)&lt;/span&gt;&lt;/span&gt; &amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 支持Group方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.JSON(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, Context.M&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;info&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ok&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).Build().Run()       &lt;span class=&quot;comment&quot;&gt;//默认端口号 :8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;./yoyorun.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Kubernetes服务发现机制的探讨(Non Service)</title>
    <link href="http://maxzhang1985.github.io/2020/05/13/app-registry-k8s/"/>
    <id>http://maxzhang1985.github.io/2020/05/13/app-registry-k8s/</id>
    <published>2020-05-13T13:31:02.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h1><pre><code>注册中⼼作为一般的RPC/Web服务中的底层设施提供了服务进程元数据（IP, Port, Interface, Group,Method等）存储，被Watch的功能，每个服务进程均需接⼊同⼀组持久化的K/V介质集群（⽐如: zookeeper,etcdv3等)。各进程均需将本进程的元数据存储于注册中⼼，并且能够Watch到其他服务进程的元数据变化（包括创建，更新等）。</code></pre><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><pre><code>Kubernetes作为容器集群化管理⽅案管理资源的维度可主观的分为服务进程管理和服务接⼊管理。服务进程管理，主要体现⽅式为Pod设计模式加控制器模式，控制器保证具有特定标签（Kubernetes-Label）的Pod保持在恒定的数量（多删，少补）。服务接⼊管理，主要为Kubernetes-Service，该Service默认为具有特定标签（KubernetesLabel）的Pod统⼀提供⼀个VIP（Kubernetes-ClusterIP）所有需要请求该组Pod的请求都会按照round-robin的负载策略转发到真正提供服务的Pod。并且CoreDNS为该Kubernetes-Service提供集群内唯⼀的域名。</code></pre><h1 id="Service-与-RPC-Web服务存在的冲突点"><a href="#Service-与-RPC-Web服务存在的冲突点" class="headerlink" title="Service 与 RPC/Web服务存在的冲突点"></a>Service 与 RPC/Web服务存在的冲突点</h1><ul><li>Kubernetes-Service标准的资源对象具有的服务描述字段 中并未提供完整的服务进程元数据字段因此，⽆法直接使⽤Kubernetes-Service进⾏服务注册与发现。</li><li>RPC/Web服务的服务注册是基于每个进程的，每个服务进程均需进⾏独⽴的注册。</li><li>Kubernetes-Service默认为服务创建VIP，提供round-robin的负载策略也与RPC/Web服务⾃有的负载策略形成了冲突。</li></ul><h1 id="抛弃Service对象，选择Pod对象进⾏注册"><a href="#抛弃Service对象，选择Pod对象进⾏注册" class="headerlink" title="抛弃Service对象，选择Pod对象进⾏注册"></a>抛弃Service对象，选择Pod对象进⾏注册</h1><ul><li>Kubernetes-Service与RPC/Web服务现有架构的冲突导致RPC/Web服务在选择服务注册与发现的时候只能选择放弃该资源对象。</li><li>RPC/Web服务既然选择了每个RPC/Web服务进程独⽴注册，因此RPC/Web服务选择将该进程具有的独有的元数据写⼊运⾏该RPC/Web服务进程的Pod在Kubernetes中的Pod资源对象的描述信息中。</li><li>每个运⾏RPC/Web服务进程的Pod将本进程的元数据写⼊Kubernetes-Pod Annotations字段。为了避免与其他使⽤Annotations字段的Operator或者其他类型的控制器（Istio）的字段冲突，使⽤Key为 app.io/annotation value为具体存储的K/V对的数组的json编码后的base64<br>编码。</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">app.io/annotation:</span> <span class="string">5LiN55So55yL5LqG5bCx5piv5LiA5Liq5paH5pys5Y2P6K6u</span></span><br></pre></td></tr></table></figure><p>由于每个RPC/Web服务的Pod均只负责注册本进程的元数据，因此Annotations字段⻓度也不会因为运⾏RPC/Web服务进程的Pod数量增加⽽增加。</p><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><pre><code>解决掉了服务注册问题，接下来需要解决的是服务发现的问题。Kubernetes Api-Server提供了Watch的功能，可以观察特定namespace甚⾄整个集群内各类资源的变化。RPC/Web服务为了避免RPC/Web服务进程watch到与RPC/Web服务进程⽆关的Pod的变化，RPC/Web服务将watch的条件限制在当前Pod所在的namespace，以及 watch 具有 app.io/label Value为app.io-value 的Pod。在Watch到对应Pod的变化后实时更新本地Cache，并通过Registry提供的Subscribe通知建⽴在注册中⼼之上的服务集群管理，或者其他功能。</code></pre><h1 id="⼯作流程"><a href="#⼯作流程" class="headerlink" title="⼯作流程"></a>⼯作流程</h1><ul><li><p>启动RPC/Web服务的Deployment或其他类型控制器使⽤Kubernetes Downward-Api将本Pod所在namespace通过环境变量的形式注⼊RPC/Web服务进程。</p></li><li><p>RPC/Web服务进程的Pod启动后通过环境变量获得当前的namespace以及该Pod名称， 调⽤<br>Kubernetes-Apiserver PATCH 功能为本Pod添加Key为app.io/label Value为app.io-value的label。</p></li><li><p>RPC/Web服务进程调⽤Kubernetes-Apiserver 将本进程的元数据通过PATCH接⼝写⼊当前Pod的Annotations字段。</p></li><li><p>RPC/Web服务进程 LIST 当前namespace下其他具有同样标签的Pod，并解码对应的Annotations字段获取其他Pod的信息。</p></li><li><p>RPC/Web服务进程 WATCH 当前namespace下其他具有同样标签的Pod的Annotations的字段变化。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Kubernetes已经为其承载的服务提供了⼀套服务发现，服务注册，以及服务集群管理机制,⽽传统基于注册中心的服务，同时也拥有⾃成体系的服务集群管理。这两个功能点形成了冲突，在⽆法调谐两者的情况，如果选择保持⾃有的服务集群管理系，放弃Kubernetes-Service功能，将元数据直接写⼊到Kubernetes Pod内，依赖Kubernetes提供的Watch功能提供维护服务集群状态，也是不错的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务注册&quot;&gt;&lt;a href=&quot;#服务注册&quot; class=&quot;headerlink&quot; title=&quot;服务注册&quot;&gt;&lt;/a&gt;服务注册&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;注册中⼼作为一般的RPC/Web服务中的底层设施提供了服务进程元数据（IP, Port, Interface
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://maxzhang1985.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes中 Pod 是怎样被驱逐的？</title>
    <link href="http://maxzhang1985.github.io/2020/05/11/k8s-pod-coutdown/"/>
    <id>http://maxzhang1985.github.io/2020/05/11/k8s-pod-coutdown/</id>
    <published>2020-05-11T17:13:01.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Kubernetes 中，Pod 使用的资源最重要的是 CPU、内存和磁盘 IO，这些资源可以被分为可压缩资源（CPU）和不可压缩资源（内存，磁盘 IO）。可压缩资源不可能导致 Pod 被驱逐，因为当 Pod 的 CPU 使用量很多时，系统可以通过重新分配权重来限制 Pod 的 CPU 使用。而对于不可压缩资源来说，如果资源不足，也就无法继续申请资源（内存用完就是用完了），此时 Kubernetes 会从该节点上驱逐一定数量的 Pod，以保证该节点上有充足的资源。<br><a id="more"></a><br>当不可压缩资源不足时，Kubernetes 是通过 kubelet 来驱逐 Pod 的。kubelet 也不是随机驱逐的，它有自己的一套驱逐机制，每个计算节点的 kubelet 都会通过抓取 cAdvisor 的指标来监控节点的资源使用量，下面我们来具体分析每种情况。</p><h2 id="1-存储资源不足"><a href="#1-存储资源不足" class="headerlink" title="1. 存储资源不足"></a>1. 存储资源不足</h2><p>下面是 kubelet 默认的关于节点存储的驱逐触发条件：</p><p>nodefs.available&lt;10%（容器 volume 使用的文件系统的可用空间，包括文件系统剩余大小和 inode 数量）</p><p>imagefs.available&lt;15%（容器镜像使用的文件系统的可用空间，包括文件系统剩余大小和 inode 数量）</p><p>当 imagefs 使用量达到阈值时，kubelet 会尝试删除不使用的镜像来清理磁盘空间。</p><p>当 nodefs 使用量达到阈值时，kubelet 就会拒绝在该节点上运行新 Pod，并向 API Server 注册一个 DiskPressure condition。然后 kubelet 会尝试删除死亡的 Pod 和容器来回收磁盘空间，如果此时 nodefs 使用量仍然没有低于阈值，kubelet 就会开始驱逐 Pod。从 Kubernetes 1.9 开始，kubelet 驱逐 Pod 的过程中不会参考 Pod 的 QoS，只是根据 Pod 的 nodefs 使用量来进行排名，并选取使用量最多的 Pod 进行驱逐。所以即使 QoS 等级为 Guaranteed 的 Pod 在这个阶段也有可能被驱逐（例如 nodefs 使用量最大）。如果驱逐的是 Daemonset，kubelet 会阻止该 Pod 重启，直到 nodefs 使用量超过阈值。</p><p>如果一个 Pod 中有多个容器，kubelet 会根据 Pod 中所有容器的 nodefs 使用量之和来进行排名。即所有容器的 container_fs_usage_bytes 指标值之和。</p><p>举个栗子，假设某计算节点上运行着一系列已知 QoS 等级和 nodefs 使用量的 Pod：</p><table><thead><tr><th>Pod Name</th><th>Pod QoS</th><th>nodefs usage</th></tr></thead><tbody><tr><td>A</td><td>Best Effort</td><td>800M</td></tr><tr><td>B</td><td>Guaranteed</td><td>1.3G</td></tr><tr><td>C</td><td>Burstable</td><td>1.2G</td></tr><tr><td>D</td><td>Burstable</td><td>700M</td></tr><tr><td>E</td><td>Best Effort</td><td>500M</td></tr><tr><td>F</td><td>Guaranteed</td><td>1G</td></tr></tbody></table><p>当 nodefs 的使用量超过阈值时，kubelet 会根据 Pod 的 nodefs 使用量来对 Pod 进行排名，首先驱逐使用量最多的 Pod。排名如下图所示：</p><table><thead><tr><th>Pod Name</th><th>Pod QoS</th><th>nodefs usage</th></tr></thead><tbody><tr><td>B</td><td>Guaranteed</td><td>1.3G</td></tr><tr><td>C</td><td>Burstable</td><td>1.2G</td></tr><tr><td>F</td><td>Guaranteed</td><td>1G</td></tr><tr><td>A</td><td>Best Effort</td><td>800M</td></tr><tr><td>D</td><td>Burstable</td><td>700M</td></tr><tr><td>E</td><td>Best Effort</td><td>500M</td></tr></tbody></table><p>可以看到在本例中，QoS 等级为 Guaranteed 的 Pod 最先被驱逐。</p><h2 id="2-内存资源不足"><a href="#2-内存资源不足" class="headerlink" title="2. 内存资源不足"></a>2. 内存资源不足</h2><p>下面是 kubelet 默认的关于节点内存资源的驱逐触发条件：</p><p>memory.available&lt;100Mi</p><p>当内存使用量超过阈值时，kubelet 就会向 API Server 注册一个 MemoryPressure condition，此时 kubelet 不会接受新的 QoS 等级为 Best Effort 的 Pod 在该节点上运行，并按照以下顺序来驱逐 Pod：</p><p>Pod 的内存使用量是否超过了 request 指定的值</p><p>根据 priority 排序，优先级低的 Pod 最先被驱逐</p><p>比较它们的内存使用量与 request 指定的值之差。</p><p>按照这个顺序，可以确保 QoS 等级为 Guaranteed 的 Pod 不会在 QoS 等级为 Best Effort 的 Pod 之前被驱逐，但不能保证它不会在 QoS 等级为 Burstable 的 Pod 之前被驱逐。</p><p>如果一个 Pod 中有多个容器，kubelet 会根据 Pod 中所有容器相对于 request 的内存使用量与之和来进行排名。即所有容器的 （container_memory_usage_bytes 指标值与 container_resource_requests_memory_bytes 指标值的差）之和。</p><p>继续举例，假设某计算节点上运行着一系列已知 QoS 等级和内存使用量的 Pod：</p><table><thead><tr><th>Pod Name</th><th>Pod QoS    Memory requested</th><th>Memory limits</th><th>Memory usage</th></tr></thead><tbody><tr><td>A</td><td>Best Effort</td><td>0</td><td>0</td><td>700M</td></tr><tr><td>B</td><td>Guaranteed</td><td>2Gi</td><td>2Gi</td><td>1.9G</td></tr><tr><td>C</td><td>Burstable</td><td>1Gi</td><td>2Gi</td><td>1.8G</td></tr><tr><td>D</td><td>Burstable</td><td>1Gi</td><td>2Gi</td><td>800M</td></tr><tr><td>E</td><td>Best Effort</td><td>0</td><td>0</td><td>300M</td></tr><tr><td>F</td><td>Guaranteed</td><td>2Gi</td><td>2Gi</td><td>1G</td></tr></tbody></table><p>当节点的内存使用量超过阈值时，kubelet 会根据 Pod 相对于 request 的内存使用量来对 Pod 进行排名。排名如下所示：</p><table><thead><tr><th>Pod Name</th><th>Pod QoS</th><th>Memory requested</th><th>Memory limits</th><th>Memory usage</th></tr></thead><tbody><tr><td>C</td><td>Burstable</td><td>1Gi</td><td>2Gi</td><td>1.8G</td><td>800M</td></tr><tr><td>A</td><td>Best Effort</td><td>0</td><td>0</td><td>700M</td><td>700M </td></tr><tr><td>E</td><td>Best Effort</td><td>0</td><td>0</td><td>300M</td><td>300M </td></tr><tr><td>B</td><td>Guaranteed</td><td>2Gi</td><td>2Gi</td><td>1.9G</td><td>-100M</td></tr><tr><td>D</td><td>Burstable</td><td>1Gi</td><td>2Gi</td><td>800M</td><td>-200M</td></tr><tr><td>F</td><td>Guaranteed</td><td>2Gi</td><td>2Gi</td><td>1G</td><td>-1G</td></tr></tbody></table><p>可以看到在本例中，可以看到在本例中，QoS 等级为 Guaranteed 的 Pod 在 QoS 等级为 Burstable 的 Pod 之前被驱逐。</p><p>当内存资源不足时，kubelet 在驱逐 Pod 时只会考虑 requests 和 Pod 的内存使用量，不会考虑 limits。</p><h2 id="3-Node-OOM-Out-Of-Memory"><a href="#3-Node-OOM-Out-Of-Memory" class="headerlink" title="3. Node OOM (Out Of Memory)"></a>3. Node OOM (Out Of Memory)</h2><p>因为 kubelet 默认每 10 秒抓取一次 cAdvisor 的监控数据，所以有可能在 kubelet 驱逐 Pod 回收内存之前发生内存使用量激增的情况，这时就有可能触发内核 OOM killer。这时删除容器的权利就由kubelet 转交到内核 OOM killer 手里，但 kubelet 仍然会起到一定的决定作用，它会根据 Pod 的 QoS 来设置其 oom_score_adj 值：<br>QoS    oom_score_adj<br>Guaranteed    -998<br>Burstable    min(max(2, 1000 - (1000 * memoryRequestBytes) / machineMemoryCapacityBytes), 999)<br>pod-infra-container    -998<br>kubelet, docker daemon, systemd service    -999<br>如果该节点在 kubelet 通过驱逐 Pod 回收内存之前触发了 OOM 事件，OOM killer 就会采取行动来降低系统的压力，它会根据下面的公式来计算 oom_score 的值：</p><p>容器使用的内存占系统内存的百分比 + oom_score_adj = oom_score</p><p>OOM killer 会杀掉 oom_score_adj 值最高的容器，如果有多个容器的 oom_score_adj 值相同，就会杀掉内存使用量最多的容器（其实是因为内存使用量最多的容器的 oom_score 值最高）。关于 OOM 的更多内容请参考：Kubernetes 内存资源限制实战。</p><p>假设某节点运行着 4 个 Pod，且每个 Pod 中只有一个容器。每个 QoS 类型为 Burstable 的 Pod 配置的内存 requests 是 4Gi，节点的内存大小为 30Gi。每个 Pod 的 oom_score_adj 值如下所示：</p><table><thead><tr><th>Pod Name</th><th>Pod QoS</th><th>oom_score_adj</th></tr></thead><tbody><tr><td>A</td><td>Best Effort</td><td>1000</td></tr><tr><td>B</td><td>Guaranteed</td><td>-998</td></tr><tr><td>C</td><td>Burstable</td><td>867（根据上面的公式计算）</td></tr><tr><td>D</td><td>Best Effort</td><td>1000</td></tr></tbody></table><p>当调用 OOM killer 时，它首先选择 oom_score_adj 值最高的容器（1000），这里有两个容器的 oom_score_adj 值都是 1000，OOM killer 最终会选择内存使用量最多的容器。</p><ol start="4"><li>总结<br>因为 kubelet 默认每 10 秒抓取一次 cAdvisor 的监控数据，所以可能在资源使用量低于阈值时，kubelet 仍然在驱逐 Pod。</li></ol><p>kubelet 将 Pod 从节点上驱逐之后，Kubernetes 会将该 Pod 重新调度到另一个资源充足的节点上。但有时候 Scheduler 会将该 Pod 重新调度到与之前相同的节点上，比如设置了节点亲和性，或者该 Pod 以 Daemonset 的形式运行。</p><p>现在你应该理解了 kubelet 驱逐 Pod 的原理和过程，如果你在部署应用时设置了恰当的参数，知道了所有的可能性，你就能更好地掌控你的集群。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Kubernetes 中，Pod 使用的资源最重要的是 CPU、内存和磁盘 IO，这些资源可以被分为可压缩资源（CPU）和不可压缩资源（内存，磁盘 IO）。可压缩资源不可能导致 Pod 被驱逐，因为当 Pod 的 CPU 使用量很多时，系统可以通过重新分配权重来限制 Pod 的 CPU 使用。而对于不可压缩资源来说，如果资源不足，也就无法继续申请资源（内存用完就是用完了），此时 Kubernetes 会从该节点上驱逐一定数量的 Pod，以保证该节点上有充足的资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="http://maxzhang1985.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core中结合枚举和资源文件显示列表</title>
    <link href="http://maxzhang1985.github.io/2020/05/11/aspnetcore-displaying-enumwhithrec/"/>
    <id>http://maxzhang1985.github.io/2020/05/11/aspnetcore-displaying-enumwhithrec/</id>
    <published>2020-05-11T16:37:10.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>模型类的某些属性以枚举形式出现，我们希望在打开编辑表单时在选择列表中显示枚举值。有时我们想要枚举元素名称，但有时我们想要使用自定义名称甚至翻译。<br>这个例子演示了如何获取枚举元素名称以选择ASP.NET Core上的列表。</p><p>假设我们有一个客户实体，其客户类型属性定义为枚举。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> CustomerTypeEnum Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>定义枚举并使其使用DisplayAttribute指定资源文件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CustomerTypeEnum</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"Companies"</span>)</span>]</span><br><span class="line">    PrivateSector,</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"PublicSector"</span>, ResourceType = typeof(Resources.Common))</span>]</span><br><span class="line">    PublicSector,</span><br><span class="line">            </span><br><span class="line">    Internal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中共有三种不同的情况：</p><ul><li><p>枚举成员仅一个名字</p></li><li><p>具有Display属性和静态名称的Enum成员</p></li><li><p>具有显示属性和资源文件的枚举成员</p></li></ul><p>我的资源文件在这里。 重要事项：将资源修饰符设置为“公共”（当资源窗口足够宽时，此选项才可见）。</p><p><img src="https://mnur-prod-public.oss-cn-beijing.aliyuncs.com/0/tech/微信截图_20200511174318.png" alt></p><p>现在添加了一个简单的编辑视图，并使用Html.GetEnumSelectList<t>()扩展方法来填充带有enum成员的选择列表。注意我如何添加第一个空选择(选择类型)作为选择列表的唯一成员。</t></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@model Customer</span><br><span class="line">@&#123;</span><br><span class="line">    ViewData[<span class="string">"Title"</span>] = <span class="string">"Edit"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;Edit&lt;/h1&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form asp-action=<span class="string">"Edit"</span> <span class="keyword">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"col-4"</span>&gt;</span><br><span class="line">        &lt;div asp-validation-summary=<span class="string">"All"</span> <span class="keyword">class</span>=<span class="string">"text-danger"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> asp-<span class="keyword">for</span>=<span class="string">"Id"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label asp-<span class="keyword">for</span>=<span class="string">"Name"</span> <span class="keyword">class</span>=<span class="string">"control-label"</span>&gt;&lt;/label&gt;</span><br><span class="line">            &lt;input asp-<span class="keyword">for</span>=<span class="string">"Name"</span> <span class="keyword">class</span>=<span class="string">"form-control"</span> /&gt;</span><br><span class="line">            &lt;span asp-validation-<span class="keyword">for</span>=<span class="string">"Name"</span> <span class="keyword">class</span>=<span class="string">"text-danger"</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label asp-<span class="keyword">for</span>=<span class="string">"Type"</span> <span class="keyword">class</span>=<span class="string">"control-label"</span>&gt;&lt;/label&gt;</span><br><span class="line">            &lt;<span class="keyword">select</span> asp-<span class="keyword">for</span>=<span class="string">"Type"</span> </span><br><span class="line">                    <span class="keyword">class</span>=<span class="string">"form-control"</span> </span><br><span class="line">                    asp-items=<span class="string">"Html.GetEnumSelectList&lt;CustomerTypeEnum&gt;()"</span>&gt;</span><br><span class="line">                &lt;option&gt;Select type ...&lt;/option&gt;</span><br><span class="line">            &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">            &lt;span asp-validation-<span class="keyword">for</span>=<span class="string">"Type"</span> <span class="keyword">class</span>=<span class="string">"text-danger"</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> <span class="keyword">value</span>=<span class="string">"Save"</span> <span class="keyword">class</span>=<span class="string">"btn btn-primary"</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"> </span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;a asp-action=<span class="string">"Index"</span>&gt;Back to List&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>当运行应用程序并移至编辑表单时，可以看到选择列表填充了枚举成员，并且ASP.NET Core带有名称和资源文件的DisplayAttribute。</p><p><img src="https://mnur-prod-public.oss-cn-beijing.aliyuncs.com/0/tech/微信截图_20200511174339.png" alt></p><p>推广<br>GitHub：<a href="https://github.com/maxzhang1985/yoyogo" target="_blank" rel="noopener">https://github.com/maxzhang1985/yoyogo</a> 如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：214741894</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;模型类的某些属性以枚举形式出现，我们希望在打开编辑表单时在选择列表中显示枚举值。有时我们想要枚举元素名称，但有时我们想要使用自定义名称甚至翻译。&lt;br&gt;这个例子演示了如何获取枚举元素名称以选择ASP.NET Core上的列表。&lt;/p&gt;
&lt;p&gt;假设我们有一个客户实体，其客户类型属性定义为枚举。&lt;br&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Guid Id &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CustomerTypeEnum Type &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次JAVA进程导致Kubernetes节点CPU飙高的排查与解决</title>
    <link href="http://maxzhang1985.github.io/2020/04/10/k8s-jvm-hicpu-problem/"/>
    <id>http://maxzhang1985.github.io/2020/04/10/k8s-jvm-hicpu-problem/</id>
    <published>2020-04-10T12:54:32.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、发现问题"><a href="#一、发现问题" class="headerlink" title="一、发现问题"></a>一、发现问题</h1><p>在一次系统上线后，我们发现某几个节点在长时间运行后会出现CPU持续飙升的问题，导致的结果就是Kubernetes集群的这个节点会把所在的Pod进行驱逐（调度）；如果调度到同样问题的节点上，也会出现Pod一直起不来的问题。我们尝试了杀死Pod后手动调度的办法（label），当然也可以排除调度节点。但是在一段时间后还会复现，我们通过监控系统也排查了这段时间的流量情况，但应该和CPU持续占用没有关联，这时我们意识到这可能是程序的问题。</p><h1 id="二、排查问题"><a href="#二、排查问题" class="headerlink" title="二、排查问题"></a>二、排查问题</h1><h2 id="定位Pod"><a href="#定位Pod" class="headerlink" title="定位Pod"></a>定位Pod</h2><p>这里使用kubectl top pods 命令确定CPU占用最高的pods都是哪些。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n app top pods</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><img src="https://mnur-prod-public.oss-cn-beijing.aliyuncs.com/0/tech/{585C9C6E-E340-4E98-A0D2-5FB209FEE396}_20200410132250.jpg" alt></p><p>因为问题已解决，以上图片只是举个例子。 </p><h2 id="排查工具"><a href="#排查工具" class="headerlink" title="排查工具"></a>排查工具</h2><h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><p>我们这边使用了阿里的Arthas ，它是Alibaba开源的Java诊断工具。当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p><p>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</p><p>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</p><p>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</p><p>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</p><p>是否有一个全局视角来查看系统的运行状况？</p><p>有什么办法可以监控到JVM的实时运行状态？</p><p>怎么快速定位应用的热点，生成火焰图？</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>定位到有问题的Pod后,使用kubectl exec进入Pod容器内部：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n app <span class="built_in">exec</span> -it 49a89b2f-73c6-40ac-b6de-c6d0e47ace64-5d489d9c48qwc7t  -- /bin/bash</span><br></pre></td></tr></table></figure></p><p>在容器中下载Arthas<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://arthas.gitee.io/arthas-boot.jar</span><br></pre></td></tr></table></figure></p><p>由于我们打包镜像中只有一个服务，所以一个Pod中也只有一个进程； 这里 1 是指PID。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar 1</span><br></pre></td></tr></table></figure></p><p><img src="https://mnur-prod-public.oss-cn-beijing.aliyuncs.com/0/tech/{57ADB7CD-4302-44DC-8119-1D319FBF8D4B}_20200410133527.jpg" alt></p><p>执行进程看板 dashboard：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[arthas@1]$ dashboard</span><br></pre></td></tr></table></figure></p><p>这里上半区显示了线程内容，我们可以看到哪个线程ID的对应情况：</p><p><img src="https://mnur-prod-public.oss-cn-beijing.aliyuncs.com/0/tech/5645015E-C7C1-42D6-A050-BE8811AD9577.png" alt></p><p>比如从上面得到了线程ID，使用如下命令进入线程，如ID 12262：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[arthas@1]$ thread -n 12262</span><br></pre></td></tr></table></figure></p><p>打印出线程日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[arthas@1]$ thread -n 12262</span><br><span class="line">&quot;com.alibaba.nacos.client.Worker.addr-bj-internal.edas.aliyun.com-7362814c-538b-4c26-aa07-1fd47765a145&quot; Id=20190 cpuUsage=7% TIMED_WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@d30d0a4e (in native)</span><br><span class="line">    at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">    -  waiting on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@d30d0a4e</span><br><span class="line">    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)</span><br><span class="line">    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:813)</span><br></pre></td></tr></table></figure></p><h1 id="三、解决问题"><a href="#三、解决问题" class="headerlink" title="三、解决问题"></a>三、解决问题</h1><p>经过了排查定位到了问题，最后经过社区和阿里云伙伴的协助，发现了这个是Nacos 2.0.0.RELEASE的一个BUG。我们对Nacos客户端版本进行了升级，经过测试后，问题解决了。也加深了对Kubernetes集群调试的能力 [加油]。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>通过社区和阿里云的帮助，问题成功解决。在工具方面，阿里提供的Arthas，真的是线上环境调试神器！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、发现问题&quot;&gt;&lt;a href=&quot;#一、发现问题&quot; class=&quot;headerlink&quot; title=&quot;一、发现问题&quot;&gt;&lt;/a&gt;一、发现问题&lt;/h1&gt;&lt;p&gt;在一次系统上线后，我们发现某几个节点在长时间运行后会出现CPU持续飙升的问题，导致的结果就是Kubernetes集群的这个节点会把所在的Pod进行驱逐（调度）；如果调度到同样问题的节点上，也会出现Pod一直起不来的问题。我们尝试了杀死Pod后手动调度的办法（label），当然也可以排除调度节点。但是在一段时间后还会复现，我们通过监控系统也排查了这段时间的流量情况，但应该和CPU持续占用没有关联，这时我们意识到这可能是程序的问题。&lt;/p&gt;
&lt;h1 id=&quot;二、排查问题&quot;&gt;&lt;a href=&quot;#二、排查问题&quot; class=&quot;headerlink&quot; title=&quot;二、排查问题&quot;&gt;&lt;/a&gt;二、排查问题&lt;/h1&gt;&lt;h2 id=&quot;定位Pod&quot;&gt;&lt;a href=&quot;#定位Pod&quot; class=&quot;headerlink&quot; title=&quot;定位Pod&quot;&gt;&lt;/a&gt;定位Pod&lt;/h2&gt;&lt;p&gt;这里使用kubectl top pods 命令确定CPU占用最高的pods都是哪些。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl -n app top pods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="k8s jvm" scheme="http://maxzhang1985.github.io/tags/k8s-jvm/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core 3.0 Assembly Unload</title>
    <link href="http://maxzhang1985.github.io/2019/05/16/netcore3-assemly-unload/"/>
    <id>http://maxzhang1985.github.io/2019/05/16/netcore3-assemly-unload/</id>
    <published>2019-05-16T11:11:16.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>.NET诞生以来，程序集的动态加载和卸载都是一个Hack的技术，之前的NetFx都是使用AppDomain的方式去加载程序集，然而AppDomain并没有提供直接卸载一个程序集的API，而是要卸载整个AppDomain才能卸载包含在其中的所有程序集。然而卸载整个CurrentAppDomain会使程序不能工作。可能有人另辟西经，创建别一个AppDomain来加载/卸载程序集，但是由于程序集之间是不能跨域访问的，也导致只能通过Remote Proxy的方式去访问，这样在类型创建和使用上带来了一定的难度也是类型的继承变得相当复杂。</p><p>.NET Core中一直没有AppDomain的支持。但是在.NET Core 3.0中，我最期待的一个特性就是对可收集程序集的支持(Collectible AssemblyLoadContext)。 众所周知.NET Core中一直使用AssemblyLoadContext的API，来进行程序集的动态加载，但是并没有提供Unload的方法，此次升级更新了这方面的能力。</p><h1 id="二、AssemblyLoadContext"><a href="#二、AssemblyLoadContext" class="headerlink" title="二、AssemblyLoadContext"></a>二、AssemblyLoadContext</h1><p>其实这次AssemblyLoadContext的设计，我认为更像是Java中ClassLoader的翻版，可以说非常类似。在使用过程中自定义AssemblyLoadContext可以内部管理其中的程序集，并对整体Context进行Unload。使用AssemblyLoadContext也可以避免程序集名称和版本的冲突。</p><a id="more"></a><h1 id="三、Getting-Started"><a href="#三、Getting-Started" class="headerlink" title="三、Getting Started"></a>三、Getting Started</h1><p>.NET Core 3.0还没有正式版，所有要使用预览版的SDK完成以下实例。我使用的是.NET Core SDK 3.0.100-preview-009812<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="keyword">new</span> globaljson --sdk-version <span class="number">3.0</span><span class="number">.100</span>-preview<span class="number">-009812</span></span><br></pre></td></tr></table></figure></p><p>AssemblyLoadContext是一个抽象类的，我们需要子类化。下面显示的是我们创建自定义AssemblyLoadContext的方法,实现一个可回收的Context需要在构造器中指定isCollectible: true ：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CollectibleAssemblyLoadContext</span> : <span class="title">AssemblyLoadContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectibleAssemblyLoadContext</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params">isCollectible: <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Assembly <span class="title">Load</span>(<span class="params">AssemblyName assemblyName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用netstandard2-0创建一个library"><a href="#使用netstandard2-0创建一个library" class="headerlink" title="使用netstandard2.0创建一个library"></a>使用netstandard2.0创建一个library</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SampleLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SayHello</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Hello</span>(<span class="params"><span class="keyword">int</span> iteration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"Hello <span class="subst">&#123;iteration&#125;</span>!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试Load-Unload"><a href="#测试Load-Unload" class="headerlink" title="测试Load/Unload"></a>测试Load/Unload</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> CollectibleAssemblyLoadContext();</span><br><span class="line"><span class="keyword">var</span> assemblyPath = Path.Combine(Directory.GetCurrentDirectory(),<span class="string">"SampleLibrary.dll"</span>);</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(assemblyPath, FileMode.Open, FileAccess.Read))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> assembly = context.LoadFromStream(fs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> type = assembly.GetType(<span class="string">"SampleLibrary.SayHello"</span>);</span><br><span class="line">    <span class="keyword">var</span> greetMethod = type.GetMethod(<span class="string">"Hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> instance = Activator.CreateInstance(type);</span><br><span class="line">    greetMethod.Invoke(instance, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; i &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">context.Unload();</span><br><span class="line"></span><br><span class="line">GC.Collect();</span><br><span class="line">GC.WaitForPendingFinalizers();</span><br></pre></td></tr></table></figure><p>当执行GC收回后，加载的程序集会被完全的回收。</p><h1 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h1><p>　　GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>　　.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;.NET诞生以来，程序集的动态加载和卸载都是一个Hack的技术，之前的NetFx都是使用AppDomain的方式去加载程序集，然而AppDomain并没有提供直接卸载一个程序集的API，而是要卸载整个AppDomain才能卸载包含在其中的所有程序集。然而卸载整个CurrentAppDomain会使程序不能工作。可能有人另辟西经，创建别一个AppDomain来加载/卸载程序集，但是由于程序集之间是不能跨域访问的，也导致只能通过Remote Proxy的方式去访问，这样在类型创建和使用上带来了一定的难度也是类型的继承变得相当复杂。&lt;/p&gt;
&lt;p&gt;.NET Core中一直没有AppDomain的支持。但是在.NET Core 3.0中，我最期待的一个特性就是对可收集程序集的支持(Collectible AssemblyLoadContext)。 众所周知.NET Core中一直使用AssemblyLoadContext的API，来进行程序集的动态加载，但是并没有提供Unload的方法，此次升级更新了这方面的能力。&lt;/p&gt;
&lt;h1 id=&quot;二、AssemblyLoadContext&quot;&gt;&lt;a href=&quot;#二、AssemblyLoadContext&quot; class=&quot;headerlink&quot; title=&quot;二、AssemblyLoadContext&quot;&gt;&lt;/a&gt;二、AssemblyLoadContext&lt;/h1&gt;&lt;p&gt;其实这次AssemblyLoadContext的设计，我认为更像是Java中ClassLoader的翻版，可以说非常类似。在使用过程中自定义AssemblyLoadContext可以内部管理其中的程序集，并对整体Context进行Unload。使用AssemblyLoadContext也可以避免程序集名称和版本的冲突。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dotnet" scheme="http://maxzhang1985.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core MVC全局应用ApiController特性</title>
    <link href="http://maxzhang1985.github.io/2019/04/04/aspnetcore2-mvc-apicontoller/"/>
    <id>http://maxzhang1985.github.io/2019/04/04/aspnetcore2-mvc-apicontoller/</id>
    <published>2019-04-04T11:30:32.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>因为在ASP.NET Core 2中，ApiController与Controller得到了统一的编程模型，都继承自Controller类。ASP.NET Core MVC 2.1中加入了[ApiController]特性，用于标示某个控制器为API控制器。</p><h1 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h1><p>[ApiController] 使得我们不再需要手动标示参数的[FormBody] 就能获取到来自HTTP请求来的JSON数据，和模型验证，这一切都会自动的发生。</p><h1 id="三、全局设置"><a href="#三、全局设置" class="headerlink" title="三、全局设置"></a>三、全局设置</h1><p>这里说是全局，但是MVC提供的方案是针对Assembly级别的。<br>设置下如：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">assembly: ApiController</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>　　GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>　　.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;因为在ASP.NET Core 2中，ApiController与Controller得到了统一的编程模型，都继承自Cont
      
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus AlertManager (服务报警中心)</title>
    <link href="http://maxzhang1985.github.io/2018/12/05/alertmanager/"/>
    <id>http://maxzhang1985.github.io/2018/12/05/alertmanager/</id>
    <published>2018-12-05T19:07:44.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-Alert-简介"><a href="#Prometheus-Alert-简介" class="headerlink" title="Prometheus Alert 简介"></a>Prometheus Alert 简介</h1><p>Prometheus（普罗米修斯）是一个开源系统监控和警报工具，最初是在SoundCloud建立的。自2012年成立以来，许多公司和组织都采用了普罗米修斯，该项目拥有一个非常活跃的开发者和用户社区。它现在是一个独立的开放源码项目，并且独立于任何公司。为了强调这一点，为了澄清项目的治理结构，普罗米修斯在2016年加入了云计算基金会，成为继Kubernetes之后的第二个托管项目。AlertMananger是它的独立报警模块.<br><a id="more"></a></p><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-下载alertManager组件"><a href="#1-下载alertManager组件" class="headerlink" title="1.下载alertManager组件"></a>1.下载alertManager组件</h2><p><a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a>  解压tar包即可。</p><h2 id="2-发送邮件配置：-alert-yml"><a href="#2-发送邮件配置：-alert-yml" class="headerlink" title="2.发送邮件配置：(alert.yml)"></a>2.发送邮件配置：(alert.yml)</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">'smtp.163.com:25'</span>   <span class="comment">#163服务器</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">'000@163.com'</span> 　<span class="comment">#发邮件的邮箱</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">'000@163.com'</span> <span class="comment">#发邮件的邮箱用户名，也就是你的邮箱</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">'000'</span> <span class="comment">#邮箱的授权密码 (如果是163邮箱，需要在设置-&gt;常规设置-&gt;点击左侧的客户端授权密码-&gt;开启授权密码)</span></span><br><span class="line"><span class="attr">templates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">'/etc/alertmanager/template/*.tmpl'</span> <span class="comment">#加载所有消息通知模板</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'default-receiver'</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname','cluster']</span> <span class="comment">#将传入警报分组在一起的标签。例如，cluster=A和alertname=LatencyHigh的多个警报将批处理为单个组。</span></span><br><span class="line">  <span class="string">group_wait：30s</span>  <span class="comment">#当传入的警报创建新的警报组时，至少等待"30s"发送初始通知。</span></span><br><span class="line">  <span class="string">group_interval：5m</span>  <span class="comment">#当发送第一个通知时，等待"5m"发送一批新的警报，这些警报开始针对该组触发。 （如果是group_by里的内容为新的如：alertname=1,alertname=2 会马上发送2封邮件, 如果是group_by之外的会等待5m触发一次）</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">4h</span> <span class="comment">#如果警报已成功发送，请等待"4h"重新发送，重复发送邮件的时间间隔</span></span><br><span class="line">  <span class="attr">routes:</span> <span class="comment">#所有与下列子路由不匹配的警报将保留在根节点，并被分派到'default-receiver'。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">'database-pager'</span></span><br><span class="line">    <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">match_re:</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">mysql|cassandra</span><span class="comment">#带有service=mysql或service=cassandra的所有警报都被发送到'database-pager'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">'frontend-pager'</span></span><br><span class="line">    <span class="attr">group_by:</span> <span class="string">[product,</span> <span class="string">environment]</span></span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="attr">team:</span> <span class="string">frontend</span> <span class="comment">#team=frontend的 和</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-receiver</span> <span class="comment">#不同的报警 发送给不同的邮箱</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'475132489@qq.com,44646@qq.com'</span>  <span class="comment">#收邮件的邮箱 多个邮箱用,隔开</span></span><br><span class="line"><span class="attr">html:</span> <span class="string">'<span class="template-variable">&#123;&#123; template "default.html" . &#125;&#125;</span>'</span>   <span class="comment">#应用哪个模板</span></span><br><span class="line">    <span class="attr">headers:</span> <span class="string">&#123;</span> <span class="attr">Subject:</span> <span class="string">"[WARN] 报警邮件default"</span> <span class="string">&#125;</span>   <span class="comment">#邮件头信息</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database-pager</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'2312123@qq.com'</span></span><br><span class="line"><span class="attr">html:</span> <span class="string">'<span class="template-variable">&#123;&#123; template "database.html" . &#125;&#125;</span>'</span>     <span class="comment">#应用哪个模板</span></span><br><span class="line">    <span class="attr">headers:</span> <span class="string">&#123;</span> <span class="attr">Subject:</span> <span class="string">"[INFO] 报警邮件test"</span> <span class="string">&#125;</span>   <span class="comment">#邮件头信息</span></span><br></pre></td></tr></table></figure><h2 id="3-配置模板"><a href="#3-配置模板" class="headerlink" title="3.配置模板"></a>3.配置模板</h2><p>AlertManager用的模板系统中使用的变量如下：</p><table><thead><tr><th>变量</th><th style="text-align:center">类型</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>Receiver</td><td style="text-align:center">String</td><td style="text-align:right">通知将被发送到的接收者名称</td></tr><tr><td>Status</td><td style="text-align:center">String</td><td style="text-align:right">报警状态 firing</td><td>resolved</td></tr><tr><td>Alerts</td><td style="text-align:center">Alert</td><td style="text-align:right">警报对象列表</td></tr><tr><td>GroupLabels</td><td style="text-align:center">KV</td><td style="text-align:right">警报的标签分组</td></tr><tr><td>CommonLabels</td><td style="text-align:center">KV</td><td style="text-align:right">警报共有的标签</td></tr><tr><td>CommonAnnotations</td><td style="text-align:center">KV</td><td style="text-align:right">警报的常用注释</td></tr><tr><td>ExternalURL</td><td style="text-align:center">String</td><td style="text-align:right">链接到发送通知的Alertmanager </td></tr><tr><td>Alert</td><td style="text-align:center">Alert</td><td style="text-align:right">警报对象列表</td></tr><tr><td>Status</td><td style="text-align:center">String</td><td style="text-align:right">定义警报是否已解决</td></tr><tr><td>Labels</td><td style="text-align:center">KV</td><td style="text-align:right">警报的一组标签</td></tr><tr><td>Annotations</td><td style="text-align:center">KV</td><td style="text-align:right">警报的一组注释</td></tr><tr><td>StartsAt</td><td style="text-align:center">time</td><td style="text-align:right">开始时间</td></tr><tr><td>EndsAt</td><td style="text-align:center">time</td><td style="text-align:right">结束时间</td></tr><tr><td>GeneratorURL</td><td style="text-align:center">String</td><td style="text-align:right">一个反向链接，用于标识此警报的生成实体</td></tr></tbody></table><h2 id="配置方法如下："><a href="#配置方法如下：" class="headerlink" title="配置方法如下："></a>配置方法如下：</h2><h2 id="alert-yml文件配置"><a href="#alert-yml文件配置" class="headerlink" title="alert.yml文件配置"></a>alert.yml文件配置</h2><p>加载目录下的模板：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">templates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">'/etc/alertmanager-0.15.3/template/*.tmpl'</span></span><br></pre></td></tr></table></figure></p><h2 id="配置模板内容"><a href="#配置模板内容" class="headerlink" title="配置模板内容"></a>配置模板内容</h2><p>在程序根目录下的template下，建立alertemp.tmpl模板文件内容如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;&#123;</span> <span class="string">define</span> <span class="string">"email.default.subject"</span> <span class="string">&#125;&#125;</span><span class="comment">#邮件主题模板</span></span><br><span class="line"><span class="string">[错误订阅信息]&#123;&#123;</span> <span class="string">len</span> <span class="string">.Alerts</span> <span class="string">&#125;&#125;条</span> <span class="string">(&#123;&#123;.GroupLabels.appid&#125;&#125;-&#123;&#123;.GroupLabels.service&#125;&#125;)</span> <span class="string">时间</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">range</span> <span class="string">$i,</span> <span class="string">$alert</span> <span class="string">:=</span> <span class="string">.Alerts</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;if</span> <span class="string">eq</span> <span class="string">$i</span> <span class="number">0</span><span class="string">&#125;&#125;</span> </span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">$alert.StartsAt</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">define</span> <span class="string">"alertemp.html"</span> <span class="string">&#125;&#125;</span><span class="comment">#邮件内容模板   alertemp.html为模板名称</span></span><br><span class="line"><span class="string">&lt;table&gt;</span><span class="comment">#模板内容 格式为html</span></span><br><span class="line"><span class="string">&lt;tr&gt;&lt;td&gt;报警名称&lt;/td&gt;&lt;td&gt;开始时间&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">range</span> <span class="string">$i,</span> <span class="string">$alert</span> <span class="string">:=</span> <span class="string">.Alerts</span> <span class="string">&#125;&#125;</span><span class="comment">#遍历Alerts</span></span><br><span class="line"><span class="string">&lt;tr&gt;&lt;td&gt;&#123;&#123;</span> <span class="string">$alert.Labels.alertname</span> <span class="string">&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;</span> <span class="string">$alert.StartsAt</span> <span class="string">&#125;&#125;&lt;/td&gt;&lt;/tr&gt;</span><span class="comment">#取值时Labels,StartsAt等严格按照 官方文档定义字段取值 否则取不到</span></span><br><span class="line"><span class="string">&lt;span</span> <span class="string">style="font-size:18px;font-weight:</span> <span class="number">600</span><span class="string">;"</span> <span class="string">&gt;错误信息:</span>  <span class="string">&lt;/span&gt;&lt;span</span> <span class="string">style="font-size:15px;"&gt;&#123;&#123;</span> <span class="string">$alert.Annotations.errormessage</span> <span class="string">&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="指定接收者和模板格式"><a href="#指定接收者和模板格式" class="headerlink" title="指定接收者和模板格式"></a>指定接收者和模板格式</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-receiver</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'475132489@qq.com'</span><span class="comment">#收邮件的邮箱</span></span><br><span class="line"><span class="attr">html:</span> <span class="string">'<span class="template-variable">&#123;&#123; template "alertemp.html" . &#125;&#125;</span>'</span>     <span class="comment">#应用哪个模板</span></span><br><span class="line"><span class="attr">headers:</span> <span class="string">&#123;</span> <span class="attr">Subject:</span> <span class="string">"[WARN] 报警邮件alertemp"</span> <span class="string">&#125;</span>   <span class="comment">#邮件主题信息 如果不写headers也可以在模板中定义默认加载email.default.subject这个模板</span></span><br></pre></td></tr></table></figure><h1 id="二-启动与测试"><a href="#二-启动与测试" class="headerlink" title="二.启动与测试"></a>二.启动与测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alertmanager -config.file=alert.yml</span><br></pre></td></tr></table></figure><h2 id="模拟请求触发报警："><a href="#模拟请求触发报警：" class="headerlink" title="模拟请求触发报警："></a>模拟请求触发报警：</h2><h3 id="测试地址"><a href="#测试地址" class="headerlink" title="测试地址"></a>测试地址</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:9093/api/v1/alerts</span></span><br></pre></td></tr></table></figure><h3 id="POST数据"><a href="#POST数据" class="headerlink" title="POST数据"></a>POST数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"labels"</span>: &#123;</span><br><span class="line">     <span class="attr">"alertname"</span>: <span class="string">"alertname"</span>,</span><br><span class="line">     <span class="attr">"severity"</span>: <span class="string">"warning"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Instance play-app:9000 under lower load"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"play-app:9000 of job playframework-app is under lower load"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>1.不同报警发送不同的邮箱，每个邮箱的模板都可以自定义。<br>2.appId，service，title 都相同的报警信息，一定时间内汇总到一封邮件内。<br>3.alertmanager post请求 ip:9093/-/reload 完成配置文件的热加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prometheus-Alert-简介&quot;&gt;&lt;a href=&quot;#Prometheus-Alert-简介&quot; class=&quot;headerlink&quot; title=&quot;Prometheus Alert 简介&quot;&gt;&lt;/a&gt;Prometheus Alert 简介&lt;/h1&gt;&lt;p&gt;Prometheus（普罗米修斯）是一个开源系统监控和警报工具，最初是在SoundCloud建立的。自2012年成立以来，许多公司和组织都采用了普罗米修斯，该项目拥有一个非常活跃的开发者和用户社区。它现在是一个独立的开放源码项目，并且独立于任何公司。为了强调这一点，为了澄清项目的治理结构，普罗米修斯在2016年加入了云计算基金会，成为继Kubernetes之后的第二个托管项目。AlertMananger是它的独立报警模块.&lt;br&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="http://maxzhang1985.github.io/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot使用Logback通过Kafka实现日志收集</title>
    <link href="http://maxzhang1985.github.io/2018/08/23/springboot-logback-kafka/"/>
    <id>http://maxzhang1985.github.io/2018/08/23/springboot-logback-kafka/</id>
    <published>2018-08-23T10:18:34.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>承接上文.NET/Core的实现,我们的目地是为了让微服务环境中dotnet和java的服务都统一的进行日志收集。Java体系下Spring Boot + Logback很容易就接入了Kafka实现了日志收集。<br><img src="https://images2018.cnblogs.com/blog/176287/201808/176287-20180823105455132-748167066.png" alt><br><a id="more"></a><br><img src="https://images2018.cnblogs.com/blog/176287/201808/176287-20180823105503202-930473317.png" alt></p><h1 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h1><h2 id="Maven-包管理"><a href="#Maven-包管理" class="headerlink" title="Maven 包管理"></a>Maven 包管理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包依赖引用:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.danielwegener<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-kafka-appender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="logback-spring-xml"><a href="#logback-spring-xml" class="headerlink" title="logback-spring.xml"></a>logback-spring.xml</h2><p>在Spring Boot项目resources目录下添加logback-spring.xml配置文件，注意：一定要修改 {“appname”:”webdemo”}，这个值也可以在配置中设置为变量。添加如下配置，STDOUT是在连接失败时，使用的日志输出配置。所以这每个项目要根据自己的情况添加配置。在普通日志输出中使用异步策略提高性能，内容如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"kafkaAppender"</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.KafkaAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"webdemo"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includeMdc</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeMdc</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includeContext</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeContext</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">throwableConverter</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.stacktrace.ShortenedThrowableConverter"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">maxDepthPerThrowable</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxDepthPerThrowable</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">rootCauseFirst</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rootCauseFirst</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">throwableConverter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">topic</span>&gt;</span>loges<span class="tag">&lt;/<span class="name">topic</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">keyingStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.keying.HostNameKeyingStrategy"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>bootstrap.servers=127.0.0.1:9092<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- don't wait for a broker to ack the reception of a batch.  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>acks=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- wait up to 1000ms and collect log messages before sending them as a batch --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>linger.ms=1000<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- even if the producer buffer runs full, do not block the application but start to drop messages --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;producerConfig&gt;max.block.ms=0&lt;/producerConfig&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>block.on.buffer.full=false<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- kafka连接失败后，使用下面配置进行日志输出 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：一定要修改 {“appname”:”webdemo”} ， 这个值也可以在配置中设置为变量 。对于第三方框架或库的错误和异常信息如需要写入日志,错误配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"kafkaAppenderERROR"</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.KafkaAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"webdemo"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeMdc</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeMdc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeContext</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeContext</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">throwableConverter</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.stacktrace.ShortenedThrowableConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxDepthPerThrowable</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxDepthPerThrowable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rootCauseFirst</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rootCauseFirst</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">throwableConverter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topic</span>&gt;</span>ep_component_log<span class="tag">&lt;/<span class="name">topic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyingStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.keying.HostNameKeyingStrategy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.delivery.BlockingDeliveryStrategy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- wait indefinitely until the kafka producer was able to send the message --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">deliveryStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>bootstrap.servers=127.0.0.1:9020<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- don't wait for a broker to ack the reception of a batch.  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>acks=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- wait up to 1000ms and collect log messages before sending them as a batch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>linger.ms=1000<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- even if the producer buffer runs full, do not block the application but start to drop messages --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>max.block.ms=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span><span class="comment">&lt;!-- 只打印错误日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在异常日志用使用了同步策略保证，错误日志的有效收集，当然可以根据实际项目情况进行配置。</p><h2 id="LOG配置建议："><a href="#LOG配置建议：" class="headerlink" title="LOG配置建议："></a>LOG配置建议：</h2><p>日志root指定错误即可输出第三方框架异常日志:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"kafkaAppenderERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>建议只输出自己程序里的级别日志配置如下（只供参考）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"项目所在包"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"kafkaAppender"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;承接上文.NET/Core的实现,我们的目地是为了让微服务环境中dotnet和java的服务都统一的进行日志收集。Java体系下Spring Boot + Logback很容易就接入了Kafka实现了日志收集。&lt;br&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/176287/201808/176287-20180823105455132-748167066.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java springboot" scheme="http://maxzhang1985.github.io/tags/java-springboot/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core使用NLog通过Kafka实现日志收集</title>
    <link href="http://maxzhang1985.github.io/2018/08/16/netcore2-nlog-kafka/"/>
    <id>http://maxzhang1985.github.io/2018/08/16/netcore2-nlog-kafka/</id>
    <published>2018-08-16T13:09:14.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>NET Core越来越受欢迎，因为它具有在多个平台上运行的原始.NET Framework的强大功能。Kafka正迅速成为软件行业的标准消息传递技术。这篇文章简单介绍了如何使用.NET(Core)和Kafka实现NLog的Target。</p><p>在日常项目开发过程中，Java体系下Spring Boot + Logback很容易就接入了Kafka实现了日志收集，在.NET和.NET Core下一直习惯了使用NLog作为日志组件。为了让微服务环境中dotnet和java的服务都统一的进行日志收集，接下来的文章中会介绍两种语言的统一接入方式。写这个组件的目地是让团队成员不需要编写NLog的JsonLayout从而达到与java服务输出一样格式到kafka的目地，简化开发人员的配置难度，当然代价就是配置不灵活了。</p><a id="more"></a><h1 id="二、开源"><a href="#二、开源" class="headerlink" title="二、开源"></a>二、开源</h1><p>通过实现NLog的Target，接入kafka将日志传输到Logstash的组件。</p><p><a href="https://github.com/maxzhang1985/NLog.Kafka" target="_blank" rel="noopener">https://github.com/maxzhang1985/NLog.Kafka</a></p><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h2 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h2><p>NLog.Kafka组件支持.NET 4.5+和 NETStandard1.6+ ,所在可以在传统.NET使用，当然也支持.NET Core的跨平台使用(Win、Linux、Mac)。</p><h3 id="项目引用"><a href="#项目引用" class="headerlink" title="项目引用"></a>项目引用</h3><ul><li>NLog 4.5.8</li><li>NLog.Kafka</li><li>librdkafka.redist</li></ul><p>引用librdkafka.redist是因为使用了依赖库Confluent.Kafka 0.11.5,Confluent.Kafka 使用了著名的librdkafka开源库，它是用C ++编写的，作为其它的语言（如C ++，C＃，Python和Node）的Kafka驱动程序的基础。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目中建立NLog.config，并设置为Copy always，内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nlog 基础配置  第二行throwExceptions开始 上线后关闭--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">autoReload</span>=<span class="string">"true"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">throwExceptions</span>=<span class="string">"true"</span> <span class="attr">throwConfigExceptions</span>=<span class="string">"true"</span> <span class="attr">internalLogLevel</span>=<span class="string">"Trace"</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- load NLog.Extended to enable ASP.NET-specific functionality --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"queue"</span> <span class="attr">xsi:type</span>=<span class="string">"kafka"</span> <span class="attr">topic</span>=<span class="string">"ep_component_log"</span> <span class="attr">appname</span>=<span class="string">"nlogtest"</span> <span class="attr">includeMdc</span>=<span class="string">"true"</span>  &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- bootstrap.servers = 127.0.0.1:9092,127.0.0.1:9092,127.0.0.1:9092 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">producerConfig</span> <span class="attr">key</span>=<span class="string">"bootstrap.servers"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1:9092"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">producerConfig</span> <span class="attr">key</span>=<span class="string">"queue.buffering.max.messages"</span> <span class="attr">value</span>=<span class="string">"2000000"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">producerConfig</span> <span class="attr">key</span>=<span class="string">"retry.backoff.ms"</span> <span class="attr">value</span>=<span class="string">"500"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">producerConfig</span> <span class="attr">key</span>=<span class="string">"message.send.max.retries"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">writeTo</span>=<span class="string">"queue"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            Logger logger = LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">            MappedDiagnosticsContext.Set(<span class="string">"item1"</span>, <span class="string">"haha"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                logger.Info(<span class="string">"hello world"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"sended"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>附上的Demo和开源库地址：<a href="https://github.com/maxzhang1985/NLog.Kafka" target="_blank" rel="noopener">https://github.com/maxzhang1985/NLog.Kafka</a></p><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;NET Core越来越受欢迎，因为它具有在多个平台上运行的原始.NET Framework的强大功能。Kafka正迅速成为软件行业的标准消息传递技术。这篇文章简单介绍了如何使用.NET(Core)和Kafka实现NLog的Target。&lt;/p&gt;
&lt;p&gt;在日常项目开发过程中，Java体系下Spring Boot + Logback很容易就接入了Kafka实现了日志收集，在.NET和.NET Core下一直习惯了使用NLog作为日志组件。为了让微服务环境中dotnet和java的服务都统一的进行日志收集，接下来的文章中会介绍两种语言的统一接入方式。写这个组件的目地是让团队成员不需要编写NLog的JsonLayout从而达到与java服务输出一样格式到kafka的目地，简化开发人员的配置难度，当然代价就是配置不灵活了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dotnet kafka nlog" scheme="http://maxzhang1985.github.io/tags/dotnet-kafka-nlog/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core使用SkiaSharp实现验证码</title>
    <link href="http://maxzhang1985.github.io/2017/12/28/ASPNETCore-Captcha-Skia/"/>
    <id>http://maxzhang1985.github.io/2017/12/28/ASPNETCore-Captcha-Skia/</id>
    <published>2017-12-28T17:49:27.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文并没有实现一个完成的验证码样例，只是提供了在当前.NET Core 2.0下使用Drawing API的另一种思路，并以简单Demo的形式展示出来。</p><h1 id="Skia"><a href="#Skia" class="headerlink" title="Skia"></a>Skia</h1><p>Skia是一个开源的二维图形库，提供各种常用的API，并可在多种软硬件平台上运行。谷歌Chrome浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。</p><p>Skia由谷歌出资管理，任何人都可基于BSD免费软件许可证使用Skia。Skia开发团队致力于开发其核心部分， 并广泛采纳各方对于Skia的开源贡献。</p><h1 id="SkiaSharp"><a href="#SkiaSharp" class="headerlink" title="SkiaSharp"></a>SkiaSharp</h1><p>SkiaSharp是由Mono发起,基于谷歌的Skia图形库,实现的一个跨平台的2D图形.NET API绑定。提供一个全面的2D API，可用于跨移动、服务器和桌面模式的图形渲染和图像处理。</p><p>skiasharp提供PCL和平台特定的绑定：</p><ul><li>.NET Core / .NET Standard 1.3</li><li>Xamarin.Android</li><li>Xamarin.iOS</li><li>Xamarin.tvOS</li><li>Xamarin.Mac</li><li>Windows Classic Desktop (Windows.Forms / WPF)</li><li>Windows UWP (Desktop / Mobile / Xbox / HoloLens)</li></ul><h1 id="使用SkiaSharp"><a href="#使用SkiaSharp" class="headerlink" title="使用SkiaSharp"></a>使用SkiaSharp</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package SkiaSharp --version 1.59.3</span><br></pre></td></tr></table></figure><h1 id="ASP-NET验证码"><a href="#ASP-NET验证码" class="headerlink" title="ASP.NET验证码?"></a>ASP.NET验证码?</h1><p>前使用SkiaSharp实现文本绘图功能，代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] <span class="title">GetCaptcha</span>(<span class="params"><span class="keyword">string</span> captchaText</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] imageBytes = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">int</span> image2d_x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> image2d_y = <span class="number">0</span>;</span><br><span class="line">            SKRect size;</span><br><span class="line">            <span class="keyword">int</span> compensateDeepCharacters = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">using</span> (SKPaint drawStyle = CreatePaint())</span><br><span class="line">            &#123;</span><br><span class="line">                compensateDeepCharacters = (<span class="keyword">int</span>)drawStyle.TextSize / <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">if</span> (System.StringComparer.Ordinal.Equals(captchaText, captchaText.ToUpperInvariant()))</span><br><span class="line">                    compensateDeepCharacters = <span class="number">0</span>;</span><br><span class="line">                size = SkiaHelpers.MeasureText(captchaText, drawStyle);</span><br><span class="line">                image2d_x = (<span class="keyword">int</span>)size.Width + <span class="number">10</span>; </span><br><span class="line">                image2d_y = (<span class="keyword">int</span>)size.Height + <span class="number">10</span> + compensateDeepCharacters;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">using</span> (SKBitmap image2d = <span class="keyword">new</span> SKBitmap(image2d_x, image2d_y, SKColorType.Bgra8888, SKAlphaType.Premul))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (SKCanvas canvas = <span class="keyword">new</span> SKCanvas(image2d))</span><br><span class="line">                &#123;</span><br><span class="line">                    canvas.DrawColor(SKColors.Black); <span class="comment">// Clear </span></span><br><span class="line">                    <span class="keyword">using</span> (SKPaint drawStyle = CreatePaint())</span><br><span class="line">                    &#123;</span><br><span class="line">                        canvas.DrawText(captchaText, <span class="number">0</span> + <span class="number">5</span>, image2d_y - <span class="number">5</span> - compensateDeepCharacters, drawStyle);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">using</span> (SKImage img = SKImage.FromBitmap(image2d))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">using</span> (SKData p = img.Encode(SKEncodedImageFormat.Png, <span class="number">100</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            imageBytes = p.ToArray();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> imageBytes;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>ASP.NET Core输出图像：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"/api/captcha"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Captcha</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = SkiaCaptcha.Captcha.GetCaptcha(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> File(bytes, <span class="string">"image/png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://skia.org/index_zh" target="_blank" rel="noopener">https://skia.org/index_zh</a></p><p><a href="https://github.com/mono/SkiaSharp" target="_blank" rel="noopener">https://github.com/mono/SkiaSharp</a></p><p><a href="https://developer.xamarin.com/api/namespace/SkiaSharp/" target="_blank" rel="noopener">https://developer.xamarin.com/api/namespace/SkiaSharp/</a></p><h1 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h1><p><a href="https://github.com/maxzhang1985/ASPNETCore_Captcha_Skia" target="_blank" rel="noopener">https://github.com/maxzhang1985/ASPNETCore_Captcha_Skia</a></p><p>　　GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>　　.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文并没有实现一个完成的验证码样例，只是提供了在当前.NET Core 2.0下使用Drawing API的另一种思路，并以简单Demo的形
      
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>VS Code在WSL中调试.NET Core应用程序</title>
    <link href="http://maxzhang1985.github.io/2017/12/07/vscode-debug-dotnetcore-wsl/"/>
    <id>http://maxzhang1985.github.io/2017/12/07/vscode-debug-dotnetcore-wsl/</id>
    <published>2017-12-07T20:36:36.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前几个Visual Studio Code更新中发现有一个重要得特性，就是nodejs可以使用VS Code在WSL中进行Debug了（WSL是指Win10中的Linux子系统）,之前写过一篇文章是使用SSH对Linux环境进行Debug，此时的想法就是如果可以在WSL中直接对程序进行调试的话，那么对于开发人员这项功能将是在Windows中最好连接Linux环境的开发环境了，而且由于Windows子系统的“原理”，所有子系统中的进程将与系统进程运行在物理主机上，所以可以断定调试的“速度”也是非常快速的。</p><a id="more"></a><h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>要想在Visual Studio Code中调试.NET Core程序，并运行在Windows Subsystem for linux(WSL)中，需要一些先决条件，这些条件包括：</p><ul><li>需要将Windows更新到最新的创新者版本(版本号为：1709)</li><li>在WSL中安装.NET CORE SDK (2.0.2)</li><li>最新版本的VS Code和C#扩展 (Microsoft C# extension)</li></ul><p>之所以要更新Windows系统到最新的创新者版本，主要是因为之前版本的Windows不能安装Ubuntu子系统的最新版本。之前的版本为14.04，要想使用新的特性，我们要将Ubuntu子系统升级到16.04版本。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h2><p>接下来我们先使用bash命令，确定一下Windows上安装的Ubuntu子系统的版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~$ cat /etc/os-release | grep  -i version</span><br><span class="line"></span><br><span class="line">VERSION=<span class="string">"16.04.2 LTS (Xenial Xerus)"</span></span><br><span class="line">VERSION_ID=<span class="string">"16.04"</span></span><br><span class="line">VERSION_CODENAME=xenial</span><br></pre></td></tr></table></figure></p><p>但是如果已经安装过WSL后再升级Windows，那样Ubuntu子秕的版本还会是14.04，所以需要重新安装一下Ubuntu子系统，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lxrun /uninstall /full</span><br><span class="line">lxrun /install</span><br></pre></td></tr></table></figure></p><p>如果你已经是最新版本的创新者的Windows，此时Ubuntu子系统的版本也将升级到16.04。</p><h2 id="安装-NET-CORE-SDK"><a href="#安装-NET-CORE-SDK" class="headerlink" title="安装.NET CORE SDK"></a>安装.NET CORE SDK</h2><p>只需要到<a href="https://www.microsoft.com/net/core#linuxubuntu上找到，对应16.04版本安装方式，就可以顺利的安装了，与Ubuntu系统的真机安装体验一致。" target="_blank" rel="noopener">https://www.microsoft.com/net/core#linuxubuntu上找到，对应16.04版本安装方式，就可以顺利的安装了，与Ubuntu系统的真机安装体验一致。</a></p><h2 id="安装调试器"><a href="#安装调试器" class="headerlink" title="安装调试器"></a>安装调试器</h2><p>先要将调试器下载到子系统中运行bash,再运行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br><span class="line">curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l ~/vsdbg</span><br></pre></td></tr></table></figure></p><p>下载过程可能会很慢长，主要取决于是否FQ。下载后的文件会在当前目录的~/vsdbg/vsdbg。我的下载目录为:/home/maxzhang/vsdbg/vsdbg</p><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><p>添加调试启动的配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">".NET Core WSL Launch"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"coreclr"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="attr">"preLaunchTask"</span>: <span class="string">"build"</span>,</span><br><span class="line">    <span class="attr">"program"</span>: <span class="string">"/mnt/f/dotnetcoreapps/DebugOnWSL/DebugOnWSL/bin/Debug/netcoreapp2.0/DebugOnWSL.dll"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"/mnt/f/dotnetcoreapps/DebugOnWSL/DebugOnWSL"</span>,</span><br><span class="line">    <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"console"</span>: <span class="string">"internalConsole"</span>,</span><br><span class="line">    <span class="attr">"pipeTransport"</span>: &#123;</span><br><span class="line">        <span class="attr">"pipeCwd"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"pipeProgram"</span>: <span class="string">"C:\\Windows\\System32\\bash.exe"</span>,</span><br><span class="line">        <span class="attr">"pipeArgs"</span>: [</span><br><span class="line">            <span class="string">"-c"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"debuggerPath"</span>: <span class="string">"/home/maxzhang/vsdbg/vsdbg"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体路径需要按自己的需要进行修改，然后就可以按F5进行调试了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前几个Visual Studio Code更新中发现有一个重要得特性，就是nodejs可以使用VS Code在WSL中进行Debug了（WSL是指Win10中的Linux子系统）,之前写过一篇文章是使用SSH对Linux环境进行Debug，此时的想法就是如果可以在WSL中直接对程序进行调试的话，那么对于开发人员这项功能将是在Windows中最好连接Linux环境的开发环境了，而且由于Windows子系统的“原理”，所有子系统中的进程将与系统进程运行在物理主机上，所以可以断定调试的“速度”也是非常快速的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core GC 模式分析</title>
    <link href="http://maxzhang1985.github.io/2017/11/14/aspnetcore-gc-analysis/"/>
    <id>http://maxzhang1985.github.io/2017/11/14/aspnetcore-gc-analysis/</id>
    <published>2017-11-14T11:56:12.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引出问题-Asp-net-core应用在-Kubernetes上内存使用率过高问题分析"><a href="#引出问题-Asp-net-core应用在-Kubernetes上内存使用率过高问题分析" class="headerlink" title="引出问题: Asp.net core应用在 Kubernetes上内存使用率过高问题分析"></a>引出问题: Asp.net core应用在 Kubernetes上内存使用率过高问题分析</h1><p><a href="https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg</a> </p><p>这篇文章中讨论了，在默认情况下，ASP.NET Core程序跑在K8s的Docker中内存使用率&gt;=600MB，导致Docker容器频繁重启。并探讨并做了将ASP.NET Core项目配置System.GC.Server设置为False后，内存小于&lt;=150MB的实验。<br><a id="more"></a><br>这文主要讲下什么是System.GC.Server，还有GC的二种模式。</p><h1 id="对GC工作模式的分类"><a href="#对GC工作模式的分类" class="headerlink" title="对GC工作模式的分类:"></a>对GC工作模式的分类:</h1><h2 id="NET-Core-两种GC模式"><a href="#NET-Core-两种GC模式" class="headerlink" title=".NET Core 两种GC模式:"></a>.NET Core 两种GC模式:</h2><pre><code>Server GC / Workstation GC </code></pre><h2 id="Server-GC"><a href="#Server-GC" class="headerlink" title="Server GC :"></a>Server GC :</h2><p>主要应用于多处理器系统，并且作为ASP.NET Core宿主的默认配置。它会为每个处理器都创建一个GC Heap,并且会并行执行回收操作。该模式的GC可以最大化吞吐量和较好的收缩性。这种模式的特点是初始分配的内存较大，并且尽可能不回收内存,进行回收用时会很耗时,并进行内存碎片整理工作。</p><h2 id="Workstation-GC"><a href="#Workstation-GC" class="headerlink" title="Workstation GC :"></a>Workstation GC :</h2><p>主要应用于单处理器系统，Workstation GC尽可能地通过减少垃圾回收过程中程序的暂停次数来提高性能。低负载且不常在后台（如服务）执行任务的应用程序，可以在禁用并发垃圾回收的情况下使用工作站垃圾回收。特点是会频繁回收，来阻止一次较长时间的回收。</p><h2 id="Concurrent-GC-工作方式"><a href="#Concurrent-GC-工作方式" class="headerlink" title="Concurrent GC 工作方式 :"></a>Concurrent GC 工作方式 :</h2><p>是一种GC的工作方式,如果你是单处理器的机器，那么即便配置了Concurrent选项为True，也不会生效。Server GC 和Workstation GC都可以开启Concurrent GC，在GC回收的过程中大部分时间用户线程可以并发运行。但只能影响到2代对象GC的过程，因为0代1代的时间太短了。</p><h2 id="5-ASP-NET-Core-Project-GC配置"><a href="#5-ASP-NET-Core-Project-GC配置" class="headerlink" title="5.ASP.NET Core Project GC配置:"></a>5.ASP.NET Core Project GC配置:</h2><p>ASP.NET CORE项目中，通过System.GC.Server配置进行GC模式设置,创建项目默认的GC模式是: System.GC.Server : true (Server GC Concurrent Mode) 每CPU分配GC ；System.GC.Server : false (Workstation GC Concurrent mode),且Concurrent=1。</p><h2 id="GC-内存分配原则："><a href="#GC-内存分配原则：" class="headerlink" title="GC 内存分配原则："></a>GC 内存分配原则：</h2><p>GC heap用于保存0、1、2代的对象时，需要向系统申请时的基本单位是Segment，系统会分配指定值大小的Segment用于存储对象，这些值会随着程序的实际执行情况，由GC动态调整。正是由于有Segment的概念所以回出现内存碎片的问题，所以GC在垃圾回收过程中会进行内存整理，以减少内存碎片提高内存使用率。</p><p>Segment的大小取决于系统是32位还是64位，以及它正在运行的垃圾收集器的类型，下表列出了分配时系统所使用的默认值：</p><table><thead><tr><th>GC Model</th><th style="text-align:center">32-bit</th><th style="text-align:right">64-bit</th></tr></thead><tbody><tr><td>Workstation GC</td><td style="text-align:center">16 MB</td><td style="text-align:right">256 MB</td></tr><tr><td>Server GC</td><td style="text-align:center">64 MB</td><td style="text-align:right">4 GB</td></tr><tr><td>Server GC with &gt; 4 logical CPUs</td><td style="text-align:center">32 MB</td><td style="text-align:right">2 GB</td></tr><tr><td>Server GC with &gt; 8 logical CPUs</td><td style="text-align:center">16 MB</td><td style="text-align:right">1 GB</td></tr></tbody></table><p>Segment包括第2代对象，第2代对象会在内存允许的情况尽可能多的申请到内存，并使用多个段进行内存存储。<br>从GC中释放的内存量仅限于Segment的大小，但由于Segment采用动态大小进行了分配，这就使得释放后的大量内存占位导致内存使用率低下，前面也说过了，为了解决这个问题GC要对内存碎片进行整理，并中断所有线程的处理。</p><h2 id="NET-Core-GC的几种配置模式："><a href="#NET-Core-GC的几种配置模式：" class="headerlink" title=".NET Core GC的几种配置模式："></a>.NET Core GC的几种配置模式：</h2><h3 id="Concurrent-amp-Workstation-GC"><a href="#Concurrent-amp-Workstation-GC" class="headerlink" title="Concurrent &amp; Workstation GC"></a>Concurrent &amp; Workstation GC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ServerGarbageCollection</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ServerGarbageCollection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ConcurrentGarbageCollection</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ConcurrentGarbageCollection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点:在吞吐量和相应速度上寻找平衡点, GC Heap数量为1，GC threads在分配空间的线程,GC线程优先权和工作线程具有相同的优先权，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起。      </p><h3 id="Background-amp-Workstation-GC"><a href="#Background-amp-Workstation-GC" class="headerlink" title="Background &amp; Workstation GC"></a>Background &amp; Workstation GC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ServerGarbageCollection</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ServerGarbageCollection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ConcurrentGarbageCollection</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ConcurrentGarbageCollection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点:最大化吞吐量并优化gen2 GC性能, GC Heap数量为1，background GC线程与工作线程有相同优先级，但都低于前台GC线程    ，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起，较并发性能更加（针对Gen2的）。    </p><h3 id="Concurrent-amp-Server-GC"><a href="#Concurrent-amp-Server-GC" class="headerlink" title="Concurrent &amp; Server GC"></a>Concurrent &amp; Server GC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ServerGarbageCollection</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ServerGarbageCollection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ConcurrentGarbageCollection</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ConcurrentGarbageCollection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点:多处理器机器上使用多线程处理相同类型的请求以便最大化服务程序吞吐量, GC Heap数量为每处理器1个，每个处理器都有一个专职的GC线程,GC线程拥有最高线程的优先级，工作线程（非GC线程）会因为GC工作过程中会被挂起。    </p><h3 id="Background-amp-Server-GC"><a href="#Background-amp-Server-GC" class="headerlink" title="Background &amp; Server GC"></a>Background &amp; Server GC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ServerGarbageCollection</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ServerGarbageCollection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ConcurrentGarbageCollection</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ConcurrentGarbageCollection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点:在Concurrent &amp; Server GC基础上优化gen2 GC性能, GC Heap数量为每处理器1个，每个处理器都有一个专职的GC background线程,background GC线程与工作线程有相同优先级，但都低于前台GC线程，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起，较并发性能更加（针对Gen2的）<br>ephemeral generation的前台GC工作时会挂起其他所有线程。    </p><h1 id="GC几种模式的分析-参考资料"><a href="#GC几种模式的分析-参考资料" class="headerlink" title="GC几种模式的分析 (参考资料):"></a>GC几种模式的分析 (参考资料):</h1><p><a href="https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals</a></p><p><a href="https://github.com/aspnet/Home/issues/2056" target="_blank" rel="noopener">https://github.com/aspnet/Home/issues/2056</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引出问题-Asp-net-core应用在-Kubernetes上内存使用率过高问题分析&quot;&gt;&lt;a href=&quot;#引出问题-Asp-net-core应用在-Kubernetes上内存使用率过高问题分析&quot; class=&quot;headerlink&quot; title=&quot;引出问题: Asp.net core应用在 Kubernetes上内存使用率过高问题分析&quot;&gt;&lt;/a&gt;引出问题: Asp.net core应用在 Kubernetes上内存使用率过高问题分析&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;这篇文章中讨论了，在默认情况下，ASP.NET Core程序跑在K8s的Docker中内存使用率&amp;gt;=600MB，导致Docker容器频繁重启。并探讨并做了将ASP.NET Core项目配置System.GC.Server设置为False后，内存小于&amp;lt;=150MB的实验。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>在ASP.NET Core中如何调整HTTP请求大小</title>
    <link href="http://maxzhang1985.github.io/2017/09/28/aspnetcore-max-request-body-size-limit/"/>
    <id>http://maxzhang1985.github.io/2017/09/28/aspnetcore-max-request-body-size-limit/</id>
    <published>2017-09-28T15:37:40.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>一般的情况下，我们都无需调用HTTP请求的大小，只有在上传一些大文件，或者使用HTTP协议写入较大的值时（如调用WebService）才可能会调用HTTP最大请求值。</p><p>在ASP.NET Core 2.0中，它的两个宿主服务器Kestrel和HttpSys默认的HTTP最大请求大小为30MB (~28.6 MiB)。</p><p>如果当HTTP请求值大于这个默认配置时，在执行<strong>Request.Body.ReadAsync</strong>方法时，就会引发<strong>IOException</strong>异常。如果这个异常未被捕获，在<strong>Kestrel</strong>服务器中输出HTTP状态码<strong>413</strong>(Request Entity Too Large), 而在<strong>HttpSys </strong>中的HTTP状态码将是<strong>500</strong>(Internal Server Error)。<br><a id="more"></a></p><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>在ASP.NET Core中这个配置可以基于全局和每次请求进行配置。</p><h2 id="1-MVC的解决方案"><a href="#1-MVC的解决方案" class="headerlink" title="1.MVC的解决方案"></a>1.MVC的解决方案</h2><p>MVC Core中为我们提供了两种特性配置请求大小：</p><p><strong>RequestSizeLimit</strong> Attribute，对每个Action的请求大小进行配置。如下调整MyAction的请求大小值为100,000,000 字节.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">RequestSizeLimit(100_000_000)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">MyAction</span>(<span class="params">[FromBody] MyViewModel data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>DisableRequestSizeLimit</strong> Attribute可以同时应用到<strong>Controller</strong>和<strong>Action</strong>上，以禁用对HTTP请求的大小限制，也是说设置为无限制。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">DisableRequestSizeLimit</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">MyAction</span>(<span class="params">[FromBody] MyViewModel data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-请求上下文的解决方案"><a href="#2-请求上下文的解决方案" class="headerlink" title="2.请求上下文的解决方案"></a>2.请求上下文的解决方案</h2><p>这个方案是一个全局配置方案，会影响到每个请求，当然也可以通过一些灵活的配置对单个请求进行修改，它通过<strong>IHttpMaxRequestBodySizeFeature</strong> 特征进行配置。如下在HttpContext中取得，当然也可以在ApplicationServices的IOC中获取。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Features.Get&lt;IHttpMaxRequestBodySizeFeature&gt;().MaxRequestBodySize = <span class="number">100</span>_000_000;</span><br></pre></td></tr></table></figure></p><p>IHttpMaxRequestBodySizeFeature特征的<strong>MaxRequestBodySize</strong>属性是<strong>Nullable&lt; long &gt;</strong>类型，当设置为<strong>null</strong>时，类拟于MVC中的<strong>[DisableRequestSizeLimit]]</strong>。<strong>IsReadOnly</strong>属性说明此时上下文中的请求大小是否可以修改。</p><h2 id="3-全局配置解决方案"><a href="#3-全局配置解决方案" class="headerlink" title="3.全局配置解决方案"></a>3.全局配置解决方案</h2><p>通过两个宿主服务器Kestrel和HttpSys配置对请求大小进行修改，规则与前两种方案相同。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.UseKestrel(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Limits.MaxRequestBodySize = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.UseHttpSys(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.MaxRequestBodySize = <span class="number">100</span>_000_000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h1><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;一般的情况下，我们都无需调用HTTP请求的大小，只有在上传一些大文件，或者使用HTTP协议写入较大的值时（如调用WebService）才可能会调用HTTP最大请求值。&lt;/p&gt;
&lt;p&gt;在ASP.NET Core 2.0中，它的两个宿主服务器Kestrel和HttpSys默认的HTTP最大请求大小为30MB (~28.6 MiB)。&lt;/p&gt;
&lt;p&gt;如果当HTTP请求值大于这个默认配置时，在执行&lt;strong&gt;Request.Body.ReadAsync&lt;/strong&gt;方法时，就会引发&lt;strong&gt;IOException&lt;/strong&gt;异常。如果这个异常未被捕获，在&lt;strong&gt;Kestrel&lt;/strong&gt;服务器中输出HTTP状态码&lt;strong&gt;413&lt;/strong&gt;(Request Entity Too Large), 而在&lt;strong&gt;HttpSys &lt;/strong&gt;中的HTTP状态码将是&lt;strong&gt;500&lt;/strong&gt;(Internal Server Error)。&lt;br&gt;
    
    </summary>
    
    
      <category term="aspnet" scheme="http://maxzhang1985.github.io/tags/aspnet/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2.0 SignalR 示例</title>
    <link href="http://maxzhang1985.github.io/2017/07/04/ASP-NET-Core-2-SignalR/"/>
    <id>http://maxzhang1985.github.io/2017/07/04/ASP-NET-Core-2-SignalR/</id>
    <published>2017-07-04T11:01:48.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>上次讲SignalR还是在《<a href="http://dotnet.ren/2017/02/21/%E5%9C%A8ASP-NET-Core%E4%B8%8B%E4%BD%BF%E7%94%A8SignalR%E6%8A%80%E6%9C%AF/" target="_blank" rel="noopener">在ASP.NET Core下使用SignalR技术</a>》文章中提到，ASP.NET Core 1.x.x 版本发布中并没有包含SignalR技术和开发计划中。时间过得很快，MS已经发布了.NET Core 2.0 Preview 2 预览版，距离正式版已经不远了，上文中也提到过在ASP.NET Core 2.0中的SignalR将做为重要的组件与MVC等框架一起发布。它的开发团队也兑现了承诺，使用TypeScript对它的javascript客户端进行重写，服务端方面也会贴近ASP.NET Core的开发方式，比如会集成到ASP.NET Core依赖注入框架中。<br><a id="more"></a></p><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><p>要在ASP.NET Core 2.0中使用SignalR，要先引用Microsoft.AspNetCore.SignalR 、 Microsoft.AspNetCore.SignalR.Http 两个Package包。</p><p>目前ASP.NET Core 2.0与SignalR还都是Preview版本，所以NUGET上也找不到SignalR的程序包，想添加引用我们就得去MyGet上去找找。既然要用MyGet的话，就要为项目添加NuGet源了。</p><h2 id="1-添加NuGet源"><a href="#1-添加NuGet源" class="headerlink" title="1.添加NuGet源"></a>1.添加NuGet源</h2><p>在程序根目录新建一个命为NuGet.Config的文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clear</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"aspnetcidev"</span> <span class="attr">value</span>=<span class="string">"https://dotnet.myget.org/F/aspnetcore-ci-dev/api/v3/index.json"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"api.nuget.org"</span> <span class="attr">value</span>=<span class="string">"https://api.nuget.org/v3/index.json"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-编辑项目文件csproj"><a href="#2-编辑项目文件csproj" class="headerlink" title="2.编辑项目文件csproj"></a>2.编辑项目文件csproj</h2><p>添加上面提到的两个包的引用：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.All"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-preview3-26040"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.SignalR"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview3-26037"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.SignalR.Http"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview3-26037"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>我在这个示例里使用的是目前的最高,当然版本号每天都有可能发生变化，最新版本的SignalR，是不兼容.NET Core SDK 2.0 Preview 1中默认创建项目时Microsoft.AspNetCore.All这个包的版本的，这里也修改修改一下版本号为：Microsoft.AspNetCore.All 2.0.0-preview3-26040。</p><h2 id="3-添加配置代码"><a href="#3-添加配置代码" class="headerlink" title="3.添加配置代码"></a>3.添加配置代码</h2><p>我们需要在Startup类中的 ConfigureServices方法中添加如下代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddSignalR();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Startup类中的Configure方法中添加如下代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.UseSignalR(routes =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        routes.MapHub&lt;Chat&gt;(<span class="string">"hubs"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-添加一个HUB类"><a href="#4-添加一个HUB类" class="headerlink" title="4.添加一个HUB类"></a>4.添加一个HUB类</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Chat</span> : <span class="title">Hub</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">OnConnectedAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> Clients.All.InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span> joined"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">OnDisconnectedAsync</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> Clients.All.InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span> left"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Clients.All.InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span>: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">SendToGroup</span>(<span class="params"><span class="keyword">string</span> groupName, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Clients.Group(groupName).InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span>@<span class="subst">&#123;groupName&#125;</span>: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">JoinGroup</span>(<span class="params"><span class="keyword">string</span> groupName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> Groups.AddAsync(Context.ConnectionId, groupName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> Clients.Group(groupName).InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span> joined <span class="subst">&#123;groupName&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">LeaveGroup</span>(<span class="params"><span class="keyword">string</span> groupName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> Groups.RemoveAsync(Context.ConnectionId, groupName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> Clients.Group(groupName).InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span> left <span class="subst">&#123;groupName&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Echo</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Clients.Client(Context.ConnectionId).InvokeAsync(<span class="string">"Send"</span>, <span class="string">$"<span class="subst">&#123;Context.ConnectionId&#125;</span>: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-客户端支持"><a href="#5-客户端支持" class="headerlink" title="5.客户端支持"></a>5.客户端支持</h2><p>　　在wwwroot目录下创建一个名为chat.html的Html静态文件，内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"head1"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"formatType"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"json"</span>&gt;</span>json<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"line"</span>&gt;</span>line<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">value</span>=<span class="string">"Connect"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">value</span>=<span class="string">"Disconnect"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>To Everybody<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-append"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"message-text"</span> <span class="attr">placeholder</span>=<span class="string">"Type a message, name or group"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"broadcast"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Broadcast"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"broadcast-exceptme"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Broadcast (All Except Me)"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"join"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Enter Name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"join-group"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Join Group"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"leave-group"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Leave Group"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>To Me<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-append"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"me-message-text"</span> <span class="attr">placeholder</span>=<span class="string">"Type a message"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"send"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Send to me"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Private Message<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend input-append"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"private-message"</span> <span class="attr">id</span>=<span class="string">"private-message-text"</span> <span class="attr">placeholder</span>=<span class="string">"Type a message"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">placeholder</span>=<span class="string">"Type a user or group name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"privatemsg"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Send to user"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"groupmsg"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Send to group"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"message-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"signalr-client.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> isConnected = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params">connection, method, ...args</span>) </span>&#123;</span></span><br><span class="line">    if (!isConnected) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> argsArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span></span><br><span class="line">    connection.invoke.apply(connection, argsArray.slice(1))</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"invocation completed successfully: "</span> + (result === <span class="literal">null</span> ? <span class="string">'(null)'</span> : result));</span></span><br><span class="line"></span><br><span class="line">                if (result) &#123;</span><br><span class="line"><span class="javascript">                    addLine(<span class="string">'message-list'</span>, result);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                addLine(<span class="string">'message-list'</span>, err, <span class="string">'red'</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id).value;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> transportType = signalR.TransportType[getParameterByName(<span class="string">'transport'</span>)] || signalR.TransportType.WebSockets;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'head1'</span>).innerHTML = signalR.TransportType[transportType];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> connectButton = <span class="built_in">document</span>.getElementById(<span class="string">'connect'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> disconnectButton = <span class="built_in">document</span>.getElementById(<span class="string">'disconnect'</span>);</span></span><br><span class="line"><span class="javascript">disconnectButton.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> connection;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'connect'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    connectButton.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    disconnectButton.disabled = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> http = <span class="keyword">new</span> signalR.HttpConnection(<span class="string">`http://<span class="subst">$&#123;<span class="built_in">document</span>.location.host&#125;</span>/hubs`</span>, &#123; <span class="attr">transport</span>: transportType &#125;);</span></span><br><span class="line"><span class="javascript">    connection = <span class="keyword">new</span> signalR.HubConnection(http);</span></span><br><span class="line"><span class="javascript">    connection.on(<span class="string">'Send'</span>, msg =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        addLine(<span class="string">'message-list'</span>, msg);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    connection.onClosed = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (e) &#123;</span><br><span class="line"><span class="javascript">            addLine(<span class="string">'message-list'</span>, <span class="string">'Connection closed with error: '</span> + e, <span class="string">'red'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            addLine(<span class="string">'message-list'</span>, <span class="string">'Disconnected'</span>, <span class="string">'green'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connection.start()</span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            isConnected = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            addLine(<span class="string">'message-list'</span>, <span class="string">'Connected successfully'</span>, <span class="string">'green'</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            addLine(<span class="string">'message-list'</span>, err, <span class="string">'red'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'disconnect'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    connectButton.disabled = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    disconnectButton.disabled = <span class="literal">true</span>;</span></span><br><span class="line">    connection.stop()</span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            isConnected = <span class="literal">false</span>;</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'broadcast'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> data = getText(<span class="string">'message-text'</span>);</span></span><br><span class="line"><span class="javascript">    invoke(connection, <span class="string">'Send'</span>, data);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'join-group'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> groupName = getText(<span class="string">'message-text'</span>);</span></span><br><span class="line"><span class="javascript">    invoke(connection, <span class="string">'JoinGroup'</span>, groupName);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'leave-group'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> groupName = getText(<span class="string">'message-text'</span>);</span></span><br><span class="line"><span class="javascript">    invoke(connection, <span class="string">'LeaveGroup'</span>, groupName);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'groupmsg'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> groupName = getText(<span class="string">'target'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> message = getText(<span class="string">'private-message-text'</span>);</span></span><br><span class="line"><span class="javascript">    invoke(connection, <span class="string">'SendToGroup'</span>, groupName, message);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">click(<span class="string">'send'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> data = getText(<span class="string">'me-message-text'</span>);</span></span><br><span class="line"><span class="javascript">    invoke(connection, <span class="string">'Echo'</span>, data);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>值得注意的是，你可能会发现，目前找不到signalr-client.js这个文件，它是怎么来的呢，有两种方式：<br>第1种是通过下载SignalR的源代码，找到Client-TS项目，对TypeScript进行编译可以得到。</p><p>第2种比较简单通过Npm可以在线获取：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install signalr-client --registry https://dotnet.myget.org/f/aspnetcore-ci-dev/npm/</span><br></pre></td></tr></table></figure></p><h1 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h1><p>　　附上一个可用的Demo：<a href="https://github.com/maxzhang1985/AspNetCore.SignalRDemo/" target="_blank" rel="noopener">https://github.com/maxzhang1985/AspNetCore.SignalRDemo</a> 。</p><p>　　GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>　　.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;上次讲SignalR还是在《&lt;a href=&quot;http://dotnet.ren/2017/02/21/%E5%9C%A8ASP-NET-Core%E4%B8%8B%E4%BD%BF%E7%94%A8SignalR%E6%8A%80%E6%9C%AF/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在ASP.NET Core下使用SignalR技术&lt;/a&gt;》文章中提到，ASP.NET Core 1.x.x 版本发布中并没有包含SignalR技术和开发计划中。时间过得很快，MS已经发布了.NET Core 2.0 Preview 2 预览版，距离正式版已经不远了，上文中也提到过在ASP.NET Core 2.0中的SignalR将做为重要的组件与MVC等框架一起发布。它的开发团队也兑现了承诺，使用TypeScript对它的javascript客户端进行重写，服务端方面也会贴近ASP.NET Core的开发方式，比如会集成到ASP.NET Core依赖注入框架中。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core中使用ref和Span&lt;T&gt;提高程序性能</title>
    <link href="http://maxzhang1985.github.io/2017/05/18/netcore2-ref-and-span/"/>
    <id>http://maxzhang1985.github.io/2017/05/18/netcore2-ref-and-span/</id>
    <published>2017-05-18T13:53:13.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>其实说到ref，很多同学对它已经有所了解，ref是C# 7.0的一个语言特性，它为开发人员提供了返回本地变量引用和值引用的机制。<br>Span<t>也是建立在ref语法基础上的一个复杂的数据类型，在文章的后半部分，我会有一个例子说明如何使用它。<br><a id="more"></a></t></p><h1 id="二、ref关键字"><a href="#二、ref关键字" class="headerlink" title="二、ref关键字"></a>二、ref关键字</h1><p>不论是ref还是out关键，都是一种比较难以理解和操作的语言特性，如C语言中操作指针一样，这样的高级语法总是什么带来一些副作用，但是我不认为这有什么，而且不是每一个C#开发者都要对这些内部运行的机制有着深刻的理解，我觉得不论什么复杂的东西只是为人们提供了一个自由的选择，风险和灵活性永远是不能兼容的。</p><p>来看几个例子来说明引用与指针的相同性，当然下面的使用方式早在C# 7.0之前就可以使用了：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IncrementByRef</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IncrementByPointer</span>(<span class="params"><span class="keyword">int</span>* x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   (*x)++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面两个函数分别是使用ref和非安全指针来完成参数+1。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">30</span>;</span><br><span class="line">IncrementByRef(<span class="keyword">ref</span> i);</span><br><span class="line"><span class="comment">// i = 31</span></span><br><span class="line"><span class="keyword">unsafe</span>&#123;</span><br><span class="line">   IncrementByPointer(&amp;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i = 32</span></span><br></pre></td></tr></table></figure></p><p>下面是C# 7.0提供的特性：</p><h2 id="1-ref-locals-引用本地变量"><a href="#1-ref-locals-引用本地变量" class="headerlink" title="1.ref locals (引用本地变量)"></a>1.ref locals (引用本地变量)</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">ref</span> <span class="keyword">var</span> x = <span class="keyword">ref</span> i;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// i = 43</span></span><br></pre></td></tr></table></figure><p>这个例子中为本地 i 变量的引用 x, 当改变x的值时i变量的值也改变了。</p><h2 id="2-ref-returns-返回值引用"><a href="#2-ref-returns-返回值引用" class="headerlink" title="2.ref returns (返回值引用)"></a>2.ref returns (返回值引用)</h2><p>ref returns是C# 7中一个强大的特性，下面代码是最能体现其特性的，该函数提供了，返回int数组中某一项的引用：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">ref</span> <span class="keyword">int</span> <span class="title">GetArrayRef</span>(<span class="params"><span class="keyword">int</span>[] items, <span class="keyword">int</span> index</span>)</span> =&gt; <span class="keyword">ref</span> items[index];</span><br></pre></td></tr></table></figure></p><p>通过下标取得数组中的项目的引用，改变引用值时，数组也会随之改变。</p><p>三、Span<t></t></p><p>System.Span<t>是.Net Core核心的一部分，在<strong>System.Memory.dll</strong> 程序集下。目前该特性是独立的，将来可能会集成到CoreFx中；</t></p><p>如何使用呢？在.Net Core 2.0 SDK创建的项目下引用如下NuGet包：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"System.Memory"</span> <span class="attr">Version</span>=<span class="string">"4.4.0-preview1-25305-02"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"System.Runtime.CompilerServices.Unsafe"</span> <span class="attr">Version</span>=<span class="string">"4.4.0-preview1-25305-02"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在上面我们看到了使用ref关键字可以提供的类似指针(T*)的操作单一值对象方式。基本上在.NET体系下操作指针都不认为是一件好的事件，当然.NET为我们提供了安全操作单值引用的ref。但是单值只是用户使用“指针”的一小部分需求；对于指针来说，更常见的情况是操作一系列连续的内存空间中的“元素”时。</p><p>Span<t>表示为一个已知长度和类型的连续内存块。许多方面讲它非常类似T[]或ArraySegment<t>，它提供安全的访问内存区域指针的能力。其实我理解它更将是.NET中操作(void*)指针的抽象,熟悉C/C++开发者应该更明白这意味着什么。</t></t></p><p>Span<t>的特点如下：</t></p><ul><li>抽象了所有连续内存空间的类型系统，包括：数组、非托管指针、堆栈指针、fixed或pinned过的托管数据，以及值内部区域的引用</li><li>支持CLR标准对象类型和值类型</li><li>支持泛型</li><li>支持GC,而不像指针需要自己来管理释放</li></ul><p>下面来看下Span<t>的定义，它与ref有着语法和语义上的联系：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Span&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">ref</span> T _reference;</span><br><span class="line">    <span class="keyword">int</span> _length;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">ref</span> T <span class="keyword">this</span>[<span class="keyword">int</span> index] &#123; <span class="keyword">get</span> &#123;...&#125; &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> ReadOnlySpan&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">ref</span> T _reference;</span><br><span class="line">    <span class="keyword">int</span> _length;</span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="keyword">int</span> index] &#123; <span class="keyword">get</span> &#123;...&#125; &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><p>接下来我会用一个直观的例子来说明<strong>Span<t></t></strong>的使用场景；我们以字符截取和字符转换（转换为整型）为例：</p><p>如有一个字符串<strong>string content = “content-length:123”</strong>,要转换将123转换为整型，通常的做法是先Substring将与数字字符无关的字符串进行截断，转换代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> content = <span class="string">"content-length:123"</span>;</span><br><span class="line">Stopwatch watch1 = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">watch1.Start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>.Parse(content.Substring(<span class="number">15</span>));</span><br><span class="line">&#125;</span><br><span class="line">watch1.Stop();</span><br><span class="line">Console.WriteLine(<span class="string">"\tTime Elapsed:\t"</span> + watch1.ElapsedMilliseconds.ToString(<span class="string">"N0"</span>) + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure></p><p>为什么使用这个例子呢，这是一个典型的substring的使用场景，每次操作<strong>string</strong>都会生成新的<strong>string对象</strong>,当然不光是Substring,在进行<strong>int.Parse</strong>时重复操作string对象，如果大量操作就会给GC造成压力。</p><p>使用Span实现这个算法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> content = <span class="string">"content-length:123"</span>;</span><br><span class="line">ReadOnlySpan&lt;<span class="keyword">char</span>&gt; span = content.ToCharArray();    </span><br><span class="line">span.Slice(<span class="number">15</span>).ParseToInt();</span><br><span class="line">watch.Start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> icb = span.Slice(<span class="number">15</span>).ParseToInt();</span><br><span class="line">&#125;</span><br><span class="line">watch.Stop();</span><br><span class="line">Console.WriteLine(<span class="string">"\tTime Elapsed:\t"</span> + watch.ElapsedMilliseconds.ToString(<span class="string">"N0"</span>) + <span class="string">"ms"</span>);</span><br></pre></td></tr></table></figure></p><p>这里将string转换为int的算法利用ReadonlySpan实现，这也是Span<t>的典型使用场景，官方给的场景也是如些，Span<t>适用于多次复用操作连续内存的场景。</t></t></p><p>转换代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReadonlySpanxtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ParseToInt</span>(<span class="params"><span class="keyword">this</span> ReadOnlySpan&lt;<span class="keyword">char</span>&gt; rspan</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Int16 sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        UInt16 index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rspan[<span class="number">0</span>].Equals(<span class="string">'-'</span>))&#123;</span><br><span class="line">            sign = <span class="number">-1</span>; index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = index; idx &lt; rspan.Length; idx++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = rspan[idx];</span><br><span class="line">            num = (c - <span class="string">'0'</span>) + num * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p>上述两段代码100000次调用的时间如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String Substring Convert:</span><br><span class="line">        Time Elapsed:   18ms</span><br><span class="line">ReadOnlySpan Convert:</span><br><span class="line">        Time Elapsed:   4ms</span><br></pre></td></tr></table></figure></p><p>目前Span<t>的相关支持还够，它只是最基础架构，之后CoreFx会对很多API使用Span<t>进行重构和实现。可见.Net Core的性能日后会越来越强大。</t></t></p><h2 id="相关Demo会上传到QQ群中。"><a href="#相关Demo会上传到QQ群中。" class="headerlink" title="相关Demo会上传到QQ群中。"></a><strong>相关Demo会上传到QQ群中。</strong></h2><p>　　GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>　　.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>  。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;其实说到ref，很多同学对它已经有所了解，ref是C# 7.0的一个语言特性，它为开发人员提供了返回本地变量引用和值引用的机制。&lt;br&gt;Span&lt;t&gt;也是建立在ref语法基础上的一个复杂的数据类型，在文章的后半部分，我会有一个例子说明如何使用它。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet" scheme="http://maxzhang1985.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>通过修改CoreCLR中的ClrHost实现自托管程序</title>
    <link href="http://maxzhang1985.github.io/2017/04/14/modifiy-clrhost-and-run/"/>
    <id>http://maxzhang1985.github.io/2017/04/14/modifiy-clrhost-and-run/</id>
    <published>2017-04-14T10:46:45.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们讲了<a href="http://dotnet.ren/2017/03/21/vs2017-build-coreclr-1/" target="_blank" rel="noopener">如何在windows和Linux上编译CoreClr的问题</a> 虽然文章使用的是windows 10 (Bash)环境，但是也可以做为ubuntu环境的参考。</p><p>成功编译CoreCLR的源代码之后，会在<strong>\coreclr\bin\Product\Windows_NT.x64.{*}</strong>目录生成对应的二进制文件，这里包含了基本的CLR运行时文件。其中就有我们这次想要修改的CoreRun.exe文件，它就是CLRHost的入口可执行程序，等同于dotnet命令。<br><a id="more"></a><br>当然本篇文章主要是以windows环境为例，通过修改Windowst版本的CoreRun为例来介绍，如何实现一个自己的自托管程序入口。</p><p>要想编辑Windows环境的源代码首先也是同样的需要编译CoreCLR源代码的。成功编译后会在<strong>coreclr\bin\obj\Windows_NT.x64.Debug</strong> 目录下看到VC++的项目和解决方案。打开CoreCLR.sln解决方案，可以看到其中的CoreRun项目。</p><p>首先它是一个Win32项目，我在这里只简单的讲几处关键的代码段，有兴趣的同学可以到Github上去看看<a href="https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/corerun/corerun.cpp" target="_blank" rel="noopener">CoreRun源代码</a> 。</p><p>先说一下我们想要达到的效果吧：<br>想要使用CoreRun启动一个dotnet程序集只需要如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corerun  demo.dll</span><br></pre></td></tr></table></figure></p><p>当然想真正执行起来，还需要在系统环境变量里添加<strong>CORE_ROOT</strong>来指定已经安装的CoreCLR目录。</p><p>但这次想达到的目标是不需要指定Runtime目录也不需要指定dll文件名，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo.exe</span><br></pre></td></tr></table></figure></p><p>这样是不是写发布一个自托管程序是一样的？接下来，我们来通过修改代码来实现这一目标。</p><p>首先找到HostEnvironment类，看下它的代码段<a href="https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/corerun/corerun.cpp#L112" target="_blank" rel="noopener">第112行</a>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StackSString coreRoot;</span><br><span class="line">m_coreCLRModule = <span class="literal">NULL</span>; <span class="comment">// Initialize this here since we don't call TryLoadCoreCLR if CORE_ROOT is unset.</span></span><br><span class="line"><span class="keyword">if</span> (WszGetEnvironmentVariable(W(<span class="string">"CORE_ROOT"</span>), coreRoot) &gt; <span class="number">0</span> &amp;&amp; coreRoot.GetCount() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    coreRoot.Append(W(<span class="string">'\\'</span>));</span><br><span class="line">    m_coreCLRModule = TryLoadCoreCLR(coreRoot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它通过获取系统环境变量<strong>CORE_ROOT</strong>的值来定位CoreCLR目录，并传递给TryLoadCoreCLR函数，来加载CoreCLR.dll文件。</p><p>下面来到主函数<strong>TryRun</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取命令行参数数组的指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">wchar_t</span>* exeName = argc &gt; <span class="number">0</span> ? argv[<span class="number">0</span>] : <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span>(exeName == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">log</span> &lt;&lt; W(<span class="string">"No exename specified."</span>) &lt;&lt; Logger::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StackSString appPath;</span><br><span class="line">StackSString appNiPath;</span><br><span class="line">StackSString managedAssemblyFullName;</span><br><span class="line">StackSString appLocalWinmetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span>* filePart = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">COUNT_T size = MAX_LONGPATH;</span><br><span class="line"><span class="comment">//获取可执行文件路径，如:src\coreclr\hosts\corerun\Debug\CoreRun.exe</span></span><br><span class="line"><span class="keyword">wchar_t</span>* appPathPtr = appPath.OpenUnicodeBuffer(size - <span class="number">1</span>);</span><br><span class="line">DWORD length = WszGetFullPathName(exeName, size, appPathPtr, &amp;filePart);</span><br><span class="line"><span class="keyword">if</span> (length &gt;= size)</span><br><span class="line">&#123;</span><br><span class="line">    appPath.CloseBuffer();</span><br><span class="line">    size = length;</span><br><span class="line">    <span class="comment">//获取程序集名称，如:Demo.dll</span></span><br><span class="line">    appPathPtr = appPath.OpenUnicodeBuffer(size - <span class="number">1</span>);</span><br><span class="line">    length = WszGetFullPathName(exeName, size, appPathPtr, &amp;filePart);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span> || length &gt;= size) &#123;</span><br><span class="line">    <span class="built_in">log</span> &lt;&lt; W(<span class="string">"Failed to get full path: "</span>) &lt;&lt; exeName &lt;&lt; Logger::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">log</span> &lt;&lt; W(<span class="string">"Error code: "</span>) &lt;&lt; GetLastError() &lt;&lt; Logger::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//设置程序集名称变量</span></span><br><span class="line">managedAssemblyFullName.Set(appPathPtr);</span><br></pre></td></tr></table></figure></p><p>中间的代码就省略了，无非是创建ICLRRuntimeHost2接口，加载参数如gc_server等之后就是创建AppDomain生成domainId。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里启动的就是上面设置的程序集的全路径</span></span><br><span class="line">hr = host-&gt;ExecuteAssembly(domainId, managedAssemblyFullName, argc<span class="number">-1</span>, (argc<span class="number">-1</span>)?&amp;(argv[<span class="number">1</span>]):<span class="literal">NULL</span>, &amp;exitCode);</span><br><span class="line"><span class="keyword">if</span> (FAILED(hr)) &#123;</span><br><span class="line">    <span class="built_in">log</span> &lt;&lt; W(<span class="string">"Failed call to ExecuteAssembly. ERRORCODE: "</span>) &lt;&lt; Logger::hresult &lt;&lt; hr &lt;&lt; Logger::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ExecuteAssembly函数会真正的通过domainId执行这个程序集。</p><p>其实讲到这里有的朋友应该已经明白了，想要达到我们的目标，只需要做两件事儿。</p><ul><li><p>1.修改CORE_ROOT的加载方式<br>首先修改HostEnvironment类，将获取环境CORE_ROOT的代码去掉，然后修改构造函数将路径作为参数（coreRoot）传入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HostEnvironment(StackSString coreRoot, Logger *logger)</span><br><span class="line">    : m_log(logger), m_CLRRuntimeHost(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">//......省略代码</span></span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">     m_coreCLRModule = TryLoadCoreCLR(coreRoot);</span><br></pre></td></tr></table></figure><p>  这里我使用的方式为不加载环境变量，而是指向加载目录（也就是程序执行目录appPath或是指向子目录），我使用的是后者指向了一个名为<strong>Runtimes</strong>的子目录。</p></li><li>2.修改程序集路径的获取方式<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明程序集路径变量</span></span><br><span class="line">StackSString assemblyPath;</span><br><span class="line"><span class="comment">//获取可执行文件路径</span></span><br><span class="line">assemblyPath.Set(appPathPtr);</span><br><span class="line">SString::CIterator lastBackslash = assemblyPath.End();</span><br><span class="line">assemblyPath.FindBack(lastBackslash, W(<span class="string">'\\'</span>));</span><br><span class="line"><span class="comment">//分离路径与文件名,如 ../corerun/bin/debug/  和  corerun.exe</span></span><br><span class="line">managedAssemblyFullName.Set(assemblyPath, assemblyPath.Begin(), lastBackslash + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//声明临时变量计算程序集文件名</span></span><br><span class="line">StackSString tempName;</span><br><span class="line">StackSString assemblyName;</span><br><span class="line">tempName.Set(filePart);</span><br><span class="line"><span class="keyword">auto</span> endofName = tempName.End();</span><br><span class="line"><span class="comment">//查找到扩展名标志"."位置</span></span><br><span class="line">tempName.FindBack(endofName, W(<span class="string">'.'</span>));</span><br><span class="line">assemblyName.Set(tempName, tempName.Begin(), endofName + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//替换exe为dll</span></span><br><span class="line">assemblyName.Append(W(<span class="string">"dll"</span>));</span><br><span class="line">managedAssemblyFullName.Append(assemblyName);</span><br><span class="line"></span><br><span class="line">*(filePart) = W(<span class="string">'\0'</span>);</span><br><span class="line">appPath.CloseBuffer(DWORD(filePart - appPathPtr));</span><br><span class="line"><span class="comment">//打印完整的dll路径</span></span><br><span class="line"><span class="built_in">log</span> &lt;&lt; W(<span class="string">"Loading: "</span>) &lt;&lt; managedAssemblyFullName.GetUnicode() &lt;&lt; Logger::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><p>想实现自托管的方式，就可以参考dotnet publish的生成文件，它生成是将可执行文件.exe与程序集文件同名如: demo.exe 、 demo.dll 这样的文件组织方式。其实解决方案就是得到exeName后，获取当前执行文件的全路径，提取出路径和文件名两个部分，并将文件名进行替换，这样可执行文件在加载时就会默认加载与它同名的程序集文件，来做为ExecuteAssembly的参数来执行些程序集。</p><p>Demo和修改的源代码，已经上传到QQ群文件中（Demos\CoreCLRDemo.zip），仅供参考。</p><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们讲了&lt;a href=&quot;http://dotnet.ren/2017/03/21/vs2017-build-coreclr-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何在windows和Linux上编译CoreClr的问题&lt;/a&gt; 虽然文章使用的是windows 10 (Bash)环境，但是也可以做为ubuntu环境的参考。&lt;/p&gt;
&lt;p&gt;成功编译CoreCLR的源代码之后，会在&lt;strong&gt;\coreclr\bin\Product\Windows_NT.x64.{*}&lt;/strong&gt;目录生成对应的二进制文件，这里包含了基本的CLR运行时文件。其中就有我们这次想要修改的CoreRun.exe文件，它就是CLRHost的入口可执行程序，等同于dotnet命令。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet coreclr" scheme="http://maxzhang1985.github.io/tags/dotnet-coreclr/"/>
    
  </entry>
  
  <entry>
    <title>如何在多个项目中分离Asp.Net Core Mvc的Controller和Areas</title>
    <link href="http://maxzhang1985.github.io/2017/04/07/muti-projects-mvc-areas/"/>
    <id>http://maxzhang1985.github.io/2017/04/07/muti-projects-mvc-areas/</id>
    <published>2017-04-07T17:21:28.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>软件系统中总是希望做到松耦合，项目的组织形式也是一样，本篇文章将介绍在ASP.NET CORE MVC中怎么样将Controller与主网站项目进行分离，并且对Areas进行支持。<br><a id="more"></a></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h2><p>新建两个ASP.NET Core Web应用程序，一个命名为:WebHostDemo 另一个名为: Web.Controllers ，看名字可以知道第一个项目是主程序项目，第二个是存放Controller类和Areas的项目。</p><h2 id="2-修改Mvc配置"><a href="#2-修改Mvc配置" class="headerlink" title="2.修改Mvc配置"></a>2.修改Mvc配置</h2><p>在WebHostDemo项目中修改ConfigureServices函数：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Add framework services.</span></span><br><span class="line">    services.AddMvc();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> manager = <span class="keyword">new</span> ApplicationPartManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> homeType = <span class="keyword">typeof</span>(Web.Controllers.Areas.HomeController);</span><br><span class="line">    <span class="keyword">var</span> controllerAssembly = homeType.GetTypeInfo().Assembly;</span><br><span class="line"></span><br><span class="line">    manager.ApplicationParts.Add(<span class="keyword">new</span> AssemblyPart(controllerAssembly));</span><br><span class="line">    manager.FeatureProviders.Add(<span class="keyword">new</span> ControllerFeatureProvider());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> feature = <span class="keyword">new</span> ControllerFeature();</span><br><span class="line"></span><br><span class="line">    manager.PopulateFeature(feature);</span><br><span class="line"></span><br><span class="line">    services.AddSingleton(feature.Controllers.Select(t =&gt; t.AsType()).ToArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就将另一个项目中的Controller程序集注入到主程序中了。当然还可以通过另一种方式：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddMvc().ConfigureApplicationPartManager( m =&gt; &#123;</span><br><span class="line">         <span class="keyword">var</span> feature = <span class="keyword">new</span> ControllerFeature();</span><br><span class="line">          m.ApplicationParts.Add(<span class="keyword">new</span> AssemblyPart(controllerAssembly));</span><br><span class="line">         m.PopulateFeature(feature);</span><br><span class="line">         services.AddSingleton(feature.Controllers.Select(t =&gt; t.AsType()).ToArray());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两种方式都可以注入Controller。</p><p>接下来修改Configure函数以，通过修改路由让Mvc支持Areas：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.UseMvc(routes =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    routes.MapRoute(</span><br><span class="line">        name: <span class="string">"areaRoute"</span>,</span><br><span class="line">        template: <span class="string">"&#123;area:exists&#125;/&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    routes.MapRoute(</span><br><span class="line">        name: <span class="string">"default"</span>,</span><br><span class="line">        template: <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="3-添加Areas"><a href="#3-添加Areas" class="headerlink" title="3.添加Areas"></a>3.添加Areas</h2><p>在Web.Controllers项目中建立如下目录结构：<br>Areas<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyArea1</span><br><span class="line">    -Controllers</span><br><span class="line">        -Home.cs</span><br><span class="line">    -Views</span><br><span class="line">        -Home</span><br><span class="line">            Index.cshtml</span><br></pre></td></tr></table></figure></p><h2 id="4-为Controller添加Area"><a href="#4-为Controller添加Area" class="headerlink" title="4.为Controller添加Area"></a>4.为Controller添加Area</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="meta">Area(<span class="meta-string">"MyArea1"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>还有一件事很重要，当我们这么将项目进行分离后，DEBUG主程序将没办法找到Areas和Views目录，所以DEBUG时，要将这些目录Copy到主程序代码根目录，当然如果是发布程序的话就没有这个问题。</p><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>    </p><p>Demo已经上传到群文件中，仅供参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;软件系统中总是希望做到松耦合，项目的组织形式也是一样，本篇文章将介绍在ASP.NET CORE MVC中怎么样将Controller与主网站项目进行分离，并且对Areas进行支持。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet aspnet" scheme="http://maxzhang1985.github.io/tags/dotnet-aspnet/"/>
    
  </entry>
  
  <entry>
    <title>Win10 Bash/WSL调试Linux环境下的.NET Core应用程序</title>
    <link href="http://maxzhang1985.github.io/2017/03/29/debug-dotnetcore-with-bash/"/>
    <id>http://maxzhang1985.github.io/2017/03/29/debug-dotnetcore-with-bash/</id>
    <published>2017-03-29T14:47:08.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>使用过Mac OS的程序员都知道,在Mac Book Pro上写程序是一件比较爽的事儿,作为dotneter，我们都比较羡慕Mac系统的环境,比如命令行,当然设备也是挺漂亮的。</p><p>在新的Win10系统中微软给我们提供了一个基于Ubuntu的Linux子系统（Bash/WSL）。要全用Bash/WSL也比较简单，首先要先打开开发者模式（ 设置 → 更新和安全 → 针对开发人员 → 开发人员模式）, 然后在控制面板 → 程序 → 启用Windows功能 → Windows Subsystem for Linux (Beta)对Bash功能进行安装即可。<br><a id="more"></a></p><h1 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h1><p>本文中使用的环境：</p><p>开发环境：Win10 、Visual Studio 2017、.NET Core SDK 1.0.1 (Win与Linux子系统保持版本一致) </p><p>Bash/WSL中安装.NET Core SDK<br>1.更新Ubuntu子系统的软件源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>2.安装.NET Core SDK<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dotnet-dev-1.0.1</span><br></pre></td></tr></table></figure></p><p>3.安装SSH<br>子系统间的通信，因为系统不同还是需要安装SSH服务器，unzip和 curl或wget这些组件的。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server unzip curl</span><br></pre></td></tr></table></figure></p><p>安装SSH后,系统并不能访问本机的系统的端口做通信,还需要配置一个SSH服务器的配置文件。</p><p>运行如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p><p>分别找到如下配置项做修改，修改后的内容如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UsePAM no</span><br><span class="line"></span><br><span class="line">UsePrivilegeSeparation no</span><br><span class="line"></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></p><p>修改后，按CTRL+X键退出并按Y键保存文件，回车回车。<br>最后重启下SSH服务。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure></p><h1 id="三、调试程序"><a href="#三、调试程序" class="headerlink" title="三、调试程序"></a>三、调试程序</h1><p><strong>启动SSH</strong></p><p>每次</p><p><strong>新建程序</strong></p><p>打开VS 2017 新建一个控制台应用.NET Core,并进行编译。</p><p><strong>附加调试</strong></p><p>接着默认运行起程序，然后在VS 2017 打开 调试-&gt; 附加到进程 。<br>选择连接类型为SSH ，然后连接和目标处 输入 <strong>localhost</strong>，然后回车，会弹出对话，输入对应的用户名密码(这里的密码是安装Bash/WSL后设置的用户名和密码)。</p><p><img src="http://olrotc4a9.bkt.clouddn.com/20170329160839_2017329.png" alt="20170329160839_2017329"></p><p><img src="http://olrotc4a9.bkt.clouddn.com/20170329161001_2017329.png" alt="20170329161001_2017329"></p><p>好了，这样就可以只在Windows上安心的写程序了。</p><p>.NET Core 开源学习群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409" target="_blank" rel="noopener">214741894</a>   </p><p>GitHub：<a href="https://github.com/maxzhang1985/YOYOFx" target="_blank" rel="noopener">https://github.com/maxzhang1985/YOYOFx</a>  如果觉还可以请Star下， 欢迎一起交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;使用过Mac OS的程序员都知道,在Mac Book Pro上写程序是一件比较爽的事儿,作为dotneter，我们都比较羡慕Mac系统的环境,比如命令行,当然设备也是挺漂亮的。&lt;/p&gt;
&lt;p&gt;在新的Win10系统中微软给我们提供了一个基于Ubuntu的Linux子系统（Bash/WSL）。要全用Bash/WSL也比较简单，首先要先打开开发者模式（ 设置 → 更新和安全 → 针对开发人员 → 开发人员模式）, 然后在控制面板 → 程序 → 启用Windows功能 → Windows Subsystem for Linux (Beta)对Bash功能进行安装即可。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Win10上编译CoreCLR的Windows和Linux版本</title>
    <link href="http://maxzhang1985.github.io/2017/03/21/vs2017-build-coreclr-1/"/>
    <id>http://maxzhang1985.github.io/2017/03/21/vs2017-build-coreclr-1/</id>
    <published>2017-03-21T16:30:12.000Z</published>
    <updated>2020-05-28T08:56:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、编译环境"><a href="#一、编译环境" class="headerlink" title="一、编译环境"></a>一、编译环境</h1><p>首先，不管是Windows还是Linux版本CoreCLR的编译，都是在Windows10上进行的。</p><h1 id="二、CoreCLR-for-Windows"><a href="#二、CoreCLR-for-Windows" class="headerlink" title="二、CoreCLR for Windows"></a>二、CoreCLR for Windows</h1><p>在Windows上做编译怎么能少得了Visual Studio,由于Visual Studio 2017刚刚发布，所以选用Visual Studio 2017版本作为编译工具。<br><a id="more"></a></p><h2 id="编译组件"><a href="#编译组件" class="headerlink" title="编译组件"></a>编译组件</h2><h3 id="Visual-Studio-2017安装组件"><a href="#Visual-Studio-2017安装组件" class="headerlink" title="Visual Studio 2017安装组件"></a>Visual Studio 2017安装组件</h3><p>.NET Desktop Development</p><ul><li>All Required Components</li><li>.NET Framework 4-4.6 Development Tools</li></ul><p>Desktop Development with C++</p><ul><li>All Required Components</li><li>VC++ 2017 v141 Toolset (x86, x64)</li><li>Windows 8.1 SDK and UCRT SDK</li><li>VC++ 2015.3 v140 Toolset (x86, x64)</li></ul><p>还有一个比较重要的问题，就是使用VS2017的话，还需要注册一个Visual Studio 2015的组件，需要运行如下命令：<strong>regsvr32.exe %VSINSTALLDIR%\Common7\IDE\msdia120.dll</strong> ，因为需要VS2017的环境变量，当然这也需要在<strong>Developer Command Prompt for VS2017</strong> 中运行。<br>还有最重要一点Visual Studio Express 2017不支持编译CoreCLR。</p><h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><p>要编译CoreCLR需要CMake 3.7.2及以上版本，记得加环境变量Path。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>官方给出的所需版本为 python 2.7.9，但是python 3也能很好的支持，记得加环境变量Path。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>这个是必需的嘛。</p><h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p>Windows 10 自带4.0，所以Win10就没问题。</p><h3 id="DotNet-Core-SDK"><a href="#DotNet-Core-SDK" class="headerlink" title="DotNet Core SDK"></a>DotNet Core SDK</h3><p>不需要解释吧，没有去官网下载吧。</p><h2 id="windows编译"><a href="#windows编译" class="headerlink" title="windows编译"></a>windows编译</h2><p>其实这部分有个小插曲就是，如果使用Visual Studio 2017编译的话会有一个小BUG，文档上给的例子是直接运行命令:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.cmd</span><br></pre></td></tr></table></figure></p><p>但是会得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.CSharp.Core.targets(106,11): error MSB4064: The &quot;OverrideToolHost&quot; parameter is not supported by the &quot;Csc&quot; task. Verify the parameter exists on the task, and it is a settable public instance property.</span><br></pre></td></tr></table></figure></p><p>BUG的地址如下：<a href="https://github.com/dotnet/coreclr/issues/10056" target="_blank" rel="noopener">https://github.com/dotnet/coreclr/issues/10056</a></p><p>运行下面三条命令其中之一就可以解决这个问题了，解决方法如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build x64 skiptests -- /p:CSharpCoreTargetsPath=Roslyn\Microsoft.CSharp.Core.targets</span><br><span class="line"></span><br><span class="line">build x64 checked skiptests -- /p:CSharpCoreTargetsPath=Roslyn\Microsoft.CSharp.Core.targets</span><br><span class="line"></span><br><span class="line">build x64 release skiptests -- /p:CSharpCoreTargetsPath=Roslyn\Microsoft.CSharp.Core.targets</span><br></pre></td></tr></table></figure></p><p>推荐第一条命令，生成DEBUG版本。</p><h1 id="三、CoreCLR-for-Linux"><a href="#三、CoreCLR-for-Linux" class="headerlink" title="三、CoreCLR for Linux"></a>三、CoreCLR for Linux</h1><p>这里使用Windows 10编译Linux版本是因为Win10里带有Bash，bash是一个基于Ubuntu 14.04的Windows子系统，可以“完美”模拟Linux环境，当然下面所讲的过程也完全可以在真正的Ubuntu上编译。</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>官方推荐的是ubuntu 14.04，当然也可以是别的Linux版本，本文也是使用这个版本进行的。</p><h2 id="系统组件"><a href="#系统组件" class="headerlink" title="系统组件"></a>系统组件</h2><ul><li>cmake</li><li>llvm-3.5</li><li>clang-3.5</li><li>lldb-3.6</li><li>lldb-3.6-dev</li><li>libunwind8</li><li>libunwind8-dev</li><li>gettext</li><li>libicu-dev</li><li>liblttng-ust-dev</li><li>libcurl4-openssl-dev</li><li>libssl-dev</li><li>uuid-dev</li><li>git</li></ul><p>要安装lldb-3.6需要在Ubuntu上添加安装源：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.6 main" | sudo tee /etc/apt/sources.list.d/llvm.list</span><br><span class="line"></span><br><span class="line">wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>如果系统里没有git的话，需要自己安装下。接着要安装组件，命令如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake llvm-3.5 clang-3.5 lldb-3.6 lldb-3.6-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev</span><br></pre></td></tr></table></figure></p><h2 id="Linux编译"><a href="#Linux编译" class="headerlink" title="Linux编译"></a>Linux编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>Linux上的编译相对比较简单，但是如果是DEBUG的话，Windows版本要很容易实现。编译两个版本的过程中会经过漫长的等待（最好找个<strong>代理</strong>）。</p><p>下篇文章我会讲下在Windows环境下的调试，还有我做的一些小的修改过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、编译环境&quot;&gt;&lt;a href=&quot;#一、编译环境&quot; class=&quot;headerlink&quot; title=&quot;一、编译环境&quot;&gt;&lt;/a&gt;一、编译环境&lt;/h1&gt;&lt;p&gt;首先，不管是Windows还是Linux版本CoreCLR的编译，都是在Windows10上进行的。&lt;/p&gt;
&lt;h1 id=&quot;二、CoreCLR-for-Windows&quot;&gt;&lt;a href=&quot;#二、CoreCLR-for-Windows&quot; class=&quot;headerlink&quot; title=&quot;二、CoreCLR for Windows&quot;&gt;&lt;/a&gt;二、CoreCLR for Windows&lt;/h1&gt;&lt;p&gt;在Windows上做编译怎么能少得了Visual Studio,由于Visual Studio 2017刚刚发布，所以选用Visual Studio 2017版本作为编译工具。&lt;br&gt;
    
    </summary>
    
    
      <category term="dotnet" scheme="http://maxzhang1985.github.io/tags/dotnet/"/>
    
  </entry>
  
</feed>
